#region 程序集 Newtonsoft.Json, Version=13.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
// C:\Users\40206\.nuget\packages\newtonsoft.json\13.0.2-beta1\lib\net6.0\Newtonsoft.Json.dll
#endregion

#nullable enable

using System;
using System.Diagnostics;
using System.Xml;
using System.Xml.Linq;

namespace Newtonsoft.Json
{
    //
    // 摘要:
    //     Provides methods for converting between .NET types and JSON types.
    public static class JsonConvert
    {
        //
        // 摘要:
        //     Represents JavaScript's boolean value true as a string. This field is read-only.
        public static readonly string True;
        //
        // 摘要:
        //     Represents JavaScript's boolean value false as a string. This field is read-only.
        public static readonly string False;
        //
        // 摘要:
        //     Represents JavaScript's null as a string. This field is read-only.
        public static readonly string Null;
        //
        // 摘要:
        //     Represents JavaScript's undefined as a string. This field is read-only.
        public static readonly string Undefined;
        //
        // 摘要:
        //     Represents JavaScript's positive infinity as a string. This field is read-only.
        public static readonly string PositiveInfinity;
        //
        // 摘要:
        //     Represents JavaScript's negative infinity as a string. This field is read-only.
        public static readonly string NegativeInfinity;
        //
        // 摘要:
        //     Represents JavaScript's NaN as a string. This field is read-only.
        public static readonly string NaN;

        //
        // 摘要:
        //     Gets or sets a function that creates default Newtonsoft.Json.JsonSerializerSettings.
        //     Default settings are automatically used by serialization methods on Newtonsoft.Json.JsonConvert,
        //     and Newtonsoft.Json.Linq.JToken.ToObject``1 and Newtonsoft.Json.Linq.JToken.FromObject(System.Object)
        //     on Newtonsoft.Json.Linq.JToken. To serialize without using any default settings
        //     create a Newtonsoft.Json.JsonSerializer with Newtonsoft.Json.JsonSerializer.Create.
        public static Func<JsonSerializerSettings>? DefaultSettings { get; set; }

        //
        // 摘要:
        //     Deserializes the JSON to the given anonymous type.
        //
        // 参数:
        //   value:
        //     The JSON to deserialize.
        //
        //   anonymousTypeObject:
        //     The anonymous type object.
        //
        // 类型参数:
        //   T:
        //     The anonymous type to deserialize to. This can't be specified traditionally and
        //     must be inferred from the anonymous type passed as a parameter.
        //
        // 返回结果:
        //     The deserialized anonymous type from the JSON string.
        [DebuggerStepThrough]
        public static T? DeserializeAnonymousType<T>(string value, T anonymousTypeObject);
        //
        // 摘要:
        //     Deserializes the JSON to the given anonymous type using Newtonsoft.Json.JsonSerializerSettings.
        //
        // 参数:
        //   value:
        //     The JSON to deserialize.
        //
        //   anonymousTypeObject:
        //     The anonymous type object.
        //
        //   settings:
        //     The Newtonsoft.Json.JsonSerializerSettings used to deserialize the object. If
        //     this is null, default serialization settings will be used.
        //
        // 类型参数:
        //   T:
        //     The anonymous type to deserialize to. This can't be specified traditionally and
        //     must be inferred from the anonymous type passed as a parameter.
        //
        // 返回结果:
        //     The deserialized anonymous type from the JSON string.
        [DebuggerStepThrough]
        public static T? DeserializeAnonymousType<T>(string value, T anonymousTypeObject, JsonSerializerSettings settings);
        //
        // 摘要:
        //     Deserializes the JSON to the specified .NET type using Newtonsoft.Json.JsonSerializerSettings.
        //
        // 参数:
        //   value:
        //     The object to deserialize.
        //
        //   settings:
        //     The Newtonsoft.Json.JsonSerializerSettings used to deserialize the object. If
        //     this is null, default serialization settings will be used.
        //
        // 类型参数:
        //   T:
        //     The type of the object to deserialize to.
        //
        // 返回结果:
        //     The deserialized object from the JSON string.
        [DebuggerStepThrough]
        public static T? DeserializeObject<T>(string value, JsonSerializerSettings? settings);
        //
        // 摘要:
        //     Deserializes the JSON to a .NET object.
        //
        // 参数:
        //   value:
        //     The JSON to deserialize.
        //
        // 返回结果:
        //     The deserialized object from the JSON string.
        [DebuggerStepThrough]
        public static object? DeserializeObject(string value);
        //
        // 摘要:
        //     Deserializes the JSON to a .NET object using Newtonsoft.Json.JsonSerializerSettings.
        //
        // 参数:
        //   value:
        //     The JSON to deserialize.
        //
        //   settings:
        //     The Newtonsoft.Json.JsonSerializerSettings used to deserialize the object. If
        //     this is null, default serialization settings will be used.
        //
        // 返回结果:
        //     The deserialized object from the JSON string.
        [DebuggerStepThrough]
        public static object? DeserializeObject(string value, JsonSerializerSettings settings);
        //
        // 摘要:
        //     Deserializes the JSON to the specified .NET type.
        //
        // 参数:
        //   value:
        //     The JSON to deserialize.
        //
        //   type:
        //     The System.Type of object being deserialized.
        //
        // 返回结果:
        //     The deserialized object from the JSON string.
        [DebuggerStepThrough]
        public static object? DeserializeObject(string value, Type type);
        //
        // 摘要:
        //     Deserializes the JSON to the specified .NET type.
        //
        // 参数:
        //   value:
        //     The JSON to deserialize.
        //
        // 类型参数:
        //   T:
        //     The type of the object to deserialize to.
        //
        // 返回结果:
        //     The deserialized object from the JSON string.
        [DebuggerStepThrough]
        public static T? DeserializeObject<T>(string value);
        //
        // 摘要:
        //     Deserializes the JSON to the specified .NET type using Newtonsoft.Json.JsonSerializerSettings.
        //
        // 参数:
        //   value:
        //     The JSON to deserialize.
        //
        //   type:
        //     The type of the object to deserialize to.
        //
        //   settings:
        //     The Newtonsoft.Json.JsonSerializerSettings used to deserialize the object. If
        //     this is null, default serialization settings will be used.
        //
        // 返回结果:
        //     The deserialized object from the JSON string.
        public static object? DeserializeObject(string value, Type? type, JsonSerializerSettings? settings);
        //
        // 摘要:
        //     Deserializes the JSON to the specified .NET type using a collection of Newtonsoft.Json.JsonConverter.
        //
        // 参数:
        //   value:
        //     The JSON to deserialize.
        //
        //   type:
        //     The type of the object to deserialize.
        //
        //   converters:
        //     Converters to use while deserializing.
        //
        // 返回结果:
        //     The deserialized object from the JSON string.
        [DebuggerStepThrough]
        public static object? DeserializeObject(string value, Type type, params JsonConverter[] converters);
        //
        // 摘要:
        //     Deserializes the JSON to the specified .NET type using a collection of Newtonsoft.Json.JsonConverter.
        //
        // 参数:
        //   value:
        //     The JSON to deserialize.
        //
        //   converters:
        //     Converters to use while deserializing.
        //
        // 类型参数:
        //   T:
        //     The type of the object to deserialize to.
        //
        // 返回结果:
        //     The deserialized object from the JSON string.
        [DebuggerStepThrough]
        public static T? DeserializeObject<T>(string value, params JsonConverter[] converters);
        //
        // 摘要:
        //     Deserializes the System.Xml.XmlNode from a JSON string nested in a root element
        //     specified by deserializeRootElementName, writes a Json.NET array attribute for
        //     collections, and encodes special characters.
        //
        // 参数:
        //   value:
        //     The JSON string.
        //
        //   deserializeRootElementName:
        //     The name of the root element to append when deserializing.
        //
        //   writeArrayAttribute:
        //     A value to indicate whether to write the Json.NET array attribute. This attribute
        //     helps preserve arrays when converting the written XML back to JSON.
        //
        //   encodeSpecialCharacters:
        //     A value to indicate whether to encode special characters when converting JSON
        //     to XML. If true, special characters like ':', '@', '?', '#' and '$' in JSON property
        //     names aren't used to specify XML namespaces, attributes or processing directives.
        //     Instead special characters are encoded and written as part of the XML element
        //     name.
        //
        // 返回结果:
        //     The deserialized System.Xml.XmlNode.
        public static XmlDocument? DeserializeXmlNode(string value, string? deserializeRootElementName, bool writeArrayAttribute, bool encodeSpecialCharacters);
        //
        // 摘要:
        //     Deserializes the System.Xml.XmlNode from a JSON string nested in a root element
        //     specified by deserializeRootElementName and writes a Json.NET array attribute
        //     for collections.
        //
        // 参数:
        //   value:
        //     The JSON string.
        //
        //   deserializeRootElementName:
        //     The name of the root element to append when deserializing.
        //
        //   writeArrayAttribute:
        //     A value to indicate whether to write the Json.NET array attribute. This attribute
        //     helps preserve arrays when converting the written XML back to JSON.
        //
        // 返回结果:
        //     The deserialized System.Xml.XmlNode.
        public static XmlDocument? DeserializeXmlNode(string value, string? deserializeRootElementName, bool writeArrayAttribute);
        //
        // 摘要:
        //     Deserializes the System.Xml.XmlNode from a JSON string nested in a root element
        //     specified by deserializeRootElementName.
        //
        // 参数:
        //   value:
        //     The JSON string.
        //
        //   deserializeRootElementName:
        //     The name of the root element to append when deserializing.
        //
        // 返回结果:
        //     The deserialized System.Xml.XmlNode.
        public static XmlDocument? DeserializeXmlNode(string value, string? deserializeRootElementName);
        //
        // 摘要:
        //     Deserializes the System.Xml.XmlNode from a JSON string.
        //
        // 参数:
        //   value:
        //     The JSON string.
        //
        // 返回结果:
        //     The deserialized System.Xml.XmlNode.
        public static XmlDocument? DeserializeXmlNode(string value);
        //
        // 摘要:
        //     Deserializes the System.Xml.Linq.XNode from a JSON string nested in a root element
        //     specified by deserializeRootElementName, writes a Json.NET array attribute for
        //     collections, and encodes special characters.
        //
        // 参数:
        //   value:
        //     The JSON string.
        //
        //   deserializeRootElementName:
        //     The name of the root element to append when deserializing.
        //
        //   writeArrayAttribute:
        //     A value to indicate whether to write the Json.NET array attribute. This attribute
        //     helps preserve arrays when converting the written XML back to JSON.
        //
        //   encodeSpecialCharacters:
        //     A value to indicate whether to encode special characters when converting JSON
        //     to XML. If true, special characters like ':', '@', '?', '#' and '$' in JSON property
        //     names aren't used to specify XML namespaces, attributes or processing directives.
        //     Instead special characters are encoded and written as part of the XML element
        //     name.
        //
        // 返回结果:
        //     The deserialized System.Xml.Linq.XNode.
        public static XDocument? DeserializeXNode(string value, string? deserializeRootElementName, bool writeArrayAttribute, bool encodeSpecialCharacters);
        //
        // 摘要:
        //     Deserializes the System.Xml.Linq.XNode from a JSON string.
        //
        // 参数:
        //   value:
        //     The JSON string.
        //
        // 返回结果:
        //     The deserialized System.Xml.Linq.XNode.
        public static XDocument? DeserializeXNode(string value);
        //
        // 摘要:
        //     Deserializes the System.Xml.Linq.XNode from a JSON string nested in a root element
        //     specified by deserializeRootElementName.
        //
        // 参数:
        //   value:
        //     The JSON string.
        //
        //   deserializeRootElementName:
        //     The name of the root element to append when deserializing.
        //
        // 返回结果:
        //     The deserialized System.Xml.Linq.XNode.
        public static XDocument? DeserializeXNode(string value, string? deserializeRootElementName);
        //
        // 摘要:
        //     Deserializes the System.Xml.Linq.XNode from a JSON string nested in a root element
        //     specified by deserializeRootElementName and writes a Json.NET array attribute
        //     for collections.
        //
        // 参数:
        //   value:
        //     The JSON string.
        //
        //   deserializeRootElementName:
        //     The name of the root element to append when deserializing.
        //
        //   writeArrayAttribute:
        //     A value to indicate whether to write the Json.NET array attribute. This attribute
        //     helps preserve arrays when converting the written XML back to JSON.
        //
        // 返回结果:
        //     The deserialized System.Xml.Linq.XNode.
        public static XDocument? DeserializeXNode(string value, string? deserializeRootElementName, bool writeArrayAttribute);
        //
        // 摘要:
        //     Populates the object with values from the JSON string.
        //
        // 参数:
        //   value:
        //     The JSON to populate values from.
        //
        //   target:
        //     The target object to populate values onto.
        [DebuggerStepThrough]
        public static void PopulateObject(string value, object target);
        //
        // 摘要:
        //     Populates the object with values from the JSON string using Newtonsoft.Json.JsonSerializerSettings.
        //
        // 参数:
        //   value:
        //     The JSON to populate values from.
        //
        //   target:
        //     The target object to populate values onto.
        //
        //   settings:
        //     The Newtonsoft.Json.JsonSerializerSettings used to deserialize the object. If
        //     this is null, default serialization settings will be used.
        public static void PopulateObject(string value, object target, JsonSerializerSettings? settings);
        //
        // 摘要:
        //     Serializes the specified object to a JSON string using a type, formatting and
        //     Newtonsoft.Json.JsonSerializerSettings.
        //
        // 参数:
        //   value:
        //     The object to serialize.
        //
        //   formatting:
        //     Indicates how the output should be formatted.
        //
        //   settings:
        //     The Newtonsoft.Json.JsonSerializerSettings used to serialize the object. If this
        //     is null, default serialization settings will be used.
        //
        //   type:
        //     The type of the value being serialized. This parameter is used when Newtonsoft.Json.JsonSerializer.TypeNameHandling
        //     is Newtonsoft.Json.TypeNameHandling.Auto to write out the type name if the type
        //     of the value does not match. Specifying the type is optional.
        //
        // 返回结果:
        //     A JSON string representation of the object.
        [DebuggerStepThrough]
        public static string SerializeObject(object? value, Type? type, Formatting formatting, JsonSerializerSettings? settings);
        //
        // 摘要:
        //     Serializes the specified object to a JSON string using formatting and Newtonsoft.Json.JsonSerializerSettings.
        //
        // 参数:
        //   value:
        //     The object to serialize.
        //
        //   formatting:
        //     Indicates how the output should be formatted.
        //
        //   settings:
        //     The Newtonsoft.Json.JsonSerializerSettings used to serialize the object. If this
        //     is null, default serialization settings will be used.
        //
        // 返回结果:
        //     A JSON string representation of the object.
        [DebuggerStepThrough]
        public static string SerializeObject(object? value, Formatting formatting, JsonSerializerSettings? settings);
        //
        // 摘要:
        //     Serializes the specified object to a JSON string using Newtonsoft.Json.JsonSerializerSettings.
        //
        // 参数:
        //   value:
        //     The object to serialize.
        //
        //   settings:
        //     The Newtonsoft.Json.JsonSerializerSettings used to serialize the object. If this
        //     is null, default serialization settings will be used.
        //
        // 返回结果:
        //     A JSON string representation of the object.
        [DebuggerStepThrough]
        public static string SerializeObject(object? value, JsonSerializerSettings? settings);
        //
        // 摘要:
        //     Serializes the specified object to a JSON string using formatting and a collection
        //     of Newtonsoft.Json.JsonConverter.
        //
        // 参数:
        //   value:
        //     The object to serialize.
        //
        //   formatting:
        //     Indicates how the output should be formatted.
        //
        //   converters:
        //     A collection of converters used while serializing.
        //
        // 返回结果:
        //     A JSON string representation of the object.
        [DebuggerStepThrough]
        public static string SerializeObject(object? value, Formatting formatting, params JsonConverter[] converters);
        //
        // 摘要:
        //     Serializes the specified object to a JSON string using a collection of Newtonsoft.Json.JsonConverter.
        //
        // 参数:
        //   value:
        //     The object to serialize.
        //
        //   converters:
        //     A collection of converters used while serializing.
        //
        // 返回结果:
        //     A JSON string representation of the object.
        [DebuggerStepThrough]
        public static string SerializeObject(object? value, params JsonConverter[] converters);
        //
        // 摘要:
        //     Serializes the specified object to a JSON string using a type, formatting and
        //     Newtonsoft.Json.JsonSerializerSettings.
        //
        // 参数:
        //   value:
        //     The object to serialize.
        //
        //   settings:
        //     The Newtonsoft.Json.JsonSerializerSettings used to serialize the object. If this
        //     is null, default serialization settings will be used.
        //
        //   type:
        //     The type of the value being serialized. This parameter is used when Newtonsoft.Json.JsonSerializer.TypeNameHandling
        //     is Newtonsoft.Json.TypeNameHandling.Auto to write out the type name if the type
        //     of the value does not match. Specifying the type is optional.
        //
        // 返回结果:
        //     A JSON string representation of the object.
        [DebuggerStepThrough]
        public static string SerializeObject(object? value, Type? type, JsonSerializerSettings? settings);
        //
        // 摘要:
        //     Serializes the specified object to a JSON string using formatting.
        //
        // 参数:
        //   value:
        //     The object to serialize.
        //
        //   formatting:
        //     Indicates how the output should be formatted.
        //
        // 返回结果:
        //     A JSON string representation of the object.
        [DebuggerStepThrough]
        public static string SerializeObject(object? value, Formatting formatting);
        //
        // 摘要:
        //     Serializes the specified object to a JSON string.
        //
        // 参数:
        //   value:
        //     The object to serialize.
        //
        // 返回结果:
        //     A JSON string representation of the object.
        [DebuggerStepThrough]
        public static string SerializeObject(object? value);
        //
        // 摘要:
        //     Serializes the System.Xml.XmlNode to a JSON string using formatting and omits
        //     the root object if omitRootObject is true.
        //
        // 参数:
        //   node:
        //     The node to serialize.
        //
        //   formatting:
        //     Indicates how the output should be formatted.
        //
        //   omitRootObject:
        //     Omits writing the root object.
        //
        // 返回结果:
        //     A JSON string of the System.Xml.XmlNode.
        public static string SerializeXmlNode(XmlNode? node, Formatting formatting, bool omitRootObject);
        //
        // 摘要:
        //     Serializes the System.Xml.XmlNode to a JSON string using formatting.
        //
        // 参数:
        //   node:
        //     The node to serialize.
        //
        //   formatting:
        //     Indicates how the output should be formatted.
        //
        // 返回结果:
        //     A JSON string of the System.Xml.XmlNode.
        public static string SerializeXmlNode(XmlNode? node, Formatting formatting);
        //
        // 摘要:
        //     Serializes the System.Xml.XmlNode to a JSON string.
        //
        // 参数:
        //   node:
        //     The node to serialize.
        //
        // 返回结果:
        //     A JSON string of the System.Xml.XmlNode.
        public static string SerializeXmlNode(XmlNode? node);
        //
        // 摘要:
        //     Serializes the System.Xml.Linq.XNode to a JSON string using formatting and omits
        //     the root object if omitRootObject is true.
        //
        // 参数:
        //   node:
        //     The node to serialize.
        //
        //   formatting:
        //     Indicates how the output should be formatted.
        //
        //   omitRootObject:
        //     Omits writing the root object.
        //
        // 返回结果:
        //     A JSON string of the System.Xml.Linq.XNode.
        public static string SerializeXNode(XObject? node, Formatting formatting, bool omitRootObject);
        //
        // 摘要:
        //     Serializes the System.Xml.Linq.XNode to a JSON string using formatting.
        //
        // 参数:
        //   node:
        //     The node to convert to JSON.
        //
        //   formatting:
        //     Indicates how the output should be formatted.
        //
        // 返回结果:
        //     A JSON string of the System.Xml.Linq.XNode.
        public static string SerializeXNode(XObject? node, Formatting formatting);
        //
        // 摘要:
        //     Serializes the System.Xml.Linq.XNode to a JSON string.
        //
        // 参数:
        //   node:
        //     The node to convert to JSON.
        //
        // 返回结果:
        //     A JSON string of the System.Xml.Linq.XNode.
        public static string SerializeXNode(XObject? node);
        //
        // 摘要:
        //     Converts the System.Object to its JSON string representation.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        // 返回结果:
        //     A JSON string representation of the System.Object.
        public static string ToString(object? value);
        //
        // 摘要:
        //     Converts the System.DateTimeOffset to its JSON string representation.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        // 返回结果:
        //     A JSON string representation of the System.DateTimeOffset.
        public static string ToString(DateTimeOffset value);
        //
        // 摘要:
        //     Converts the System.DateTimeOffset to its JSON string representation using the
        //     Newtonsoft.Json.DateFormatHandling specified.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        //   format:
        //     The format the date will be converted to.
        //
        // 返回结果:
        //     A JSON string representation of the System.DateTimeOffset.
        public static string ToString(DateTimeOffset value, DateFormatHandling format);
        //
        // 摘要:
        //     Converts the System.Boolean to its JSON string representation.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        // 返回结果:
        //     A JSON string representation of the System.Boolean.
        public static string ToString(bool value);
        //
        // 摘要:
        //     Converts the System.Char to its JSON string representation.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        // 返回结果:
        //     A JSON string representation of the System.Char.
        public static string ToString(char value);
        //
        // 摘要:
        //     Converts the System.Enum to its JSON string representation.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        // 返回结果:
        //     A JSON string representation of the System.Enum.
        public static string ToString(Enum value);
        //
        // 摘要:
        //     Converts the System.Int32 to its JSON string representation.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        // 返回结果:
        //     A JSON string representation of the System.Int32.
        public static string ToString(int value);
        //
        // 摘要:
        //     Converts the System.Int16 to its JSON string representation.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        // 返回结果:
        //     A JSON string representation of the System.Int16.
        public static string ToString(short value);
        //
        // 摘要:
        //     Converts the System.UInt16 to its JSON string representation.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        // 返回结果:
        //     A JSON string representation of the System.UInt16.
        [CLSCompliant(false)]
        public static string ToString(ushort value);
        //
        // 摘要:
        //     Converts the System.UInt32 to its JSON string representation.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        // 返回结果:
        //     A JSON string representation of the System.UInt32.
        [CLSCompliant(false)]
        public static string ToString(uint value);
        //
        // 摘要:
        //     Converts the System.UInt64 to its JSON string representation.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        // 返回结果:
        //     A JSON string representation of the System.UInt64.
        [CLSCompliant(false)]
        public static string ToString(ulong value);
        //
        // 摘要:
        //     Converts the System.Single to its JSON string representation.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        // 返回结果:
        //     A JSON string representation of the System.Single.
        public static string ToString(float value);
        //
        // 摘要:
        //     Converts the System.Double to its JSON string representation.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        // 返回结果:
        //     A JSON string representation of the System.Double.
        public static string ToString(double value);
        //
        // 摘要:
        //     Converts the System.Byte to its JSON string representation.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        // 返回结果:
        //     A JSON string representation of the System.Byte.
        public static string ToString(byte value);
        //
        // 摘要:
        //     Converts the System.SByte to its JSON string representation.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        // 返回结果:
        //     A JSON string representation of the System.SByte.
        [CLSCompliant(false)]
        public static string ToString(sbyte value);
        //
        // 摘要:
        //     Converts the System.Decimal to its JSON string representation.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        // 返回结果:
        //     A JSON string representation of the System.Decimal.
        public static string ToString(decimal value);
        //
        // 摘要:
        //     Converts the System.Guid to its JSON string representation.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        // 返回结果:
        //     A JSON string representation of the System.Guid.
        public static string ToString(Guid value);
        //
        // 摘要:
        //     Converts the System.TimeSpan to its JSON string representation.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        // 返回结果:
        //     A JSON string representation of the System.TimeSpan.
        public static string ToString(TimeSpan value);
        //
        // 摘要:
        //     Converts the System.Uri to its JSON string representation.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        // 返回结果:
        //     A JSON string representation of the System.Uri.
        public static string ToString(Uri? value);
        //
        // 摘要:
        //     Converts the System.String to its JSON string representation.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        // 返回结果:
        //     A JSON string representation of the System.String.
        public static string ToString(string? value);
        //
        // 摘要:
        //     Converts the System.String to its JSON string representation.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        //   delimiter:
        //     The string delimiter character.
        //
        // 返回结果:
        //     A JSON string representation of the System.String.
        public static string ToString(string? value, char delimiter);
        //
        // 摘要:
        //     Converts the System.DateTime to its JSON string representation.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        // 返回结果:
        //     A JSON string representation of the System.DateTime.
        public static string ToString(DateTime value);
        //
        // 摘要:
        //     Converts the System.String to its JSON string representation.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        //   delimiter:
        //     The string delimiter character.
        //
        //   stringEscapeHandling:
        //     The string escape handling.
        //
        // 返回结果:
        //     A JSON string representation of the System.String.
        public static string ToString(string? value, char delimiter, StringEscapeHandling stringEscapeHandling);
        //
        // 摘要:
        //     Converts the System.Int64 to its JSON string representation.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        // 返回结果:
        //     A JSON string representation of the System.Int64.
        public static string ToString(long value);
        //
        // 摘要:
        //     Converts the System.DateTime to its JSON string representation using the Newtonsoft.Json.DateFormatHandling
        //     specified.
        //
        // 参数:
        //   value:
        //     The value to convert.
        //
        //   format:
        //     The format the date will be converted to.
        //
        //   timeZoneHandling:
        //     The time zone handling when the date is converted to a string.
        //
        // 返回结果:
        //     A JSON string representation of the System.DateTime.
        public static string ToString(DateTime value, DateFormatHandling format, DateTimeZoneHandling timeZoneHandling);
    }
}