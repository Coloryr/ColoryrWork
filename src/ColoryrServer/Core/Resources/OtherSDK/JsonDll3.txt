#region 程序集 Newtonsoft.Json, Version=13.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
// C:\Users\40206\.nuget\packages\newtonsoft.json\13.0.2-beta1\lib\net6.0\Newtonsoft.Json.dll
#endregion

#nullable enable

using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;

namespace Newtonsoft.Json.Linq
{
    //
    // 摘要:
    //     Represents a JSON array.
    [DefaultMember("Item")]
    public class JArray : JContainer, IList<JToken>, ICollection<JToken>, IEnumerable<JToken>, IEnumerable
    {
        //
        // 摘要:
        //     Initializes a new instance of the Newtonsoft.Json.Linq.JArray class.
        public JArray();
        //
        // 摘要:
        //     Initializes a new instance of the Newtonsoft.Json.Linq.JArray class from another
        //     Newtonsoft.Json.Linq.JArray object.
        //
        // 参数:
        //   other:
        //     A Newtonsoft.Json.Linq.JArray object to copy from.
        public JArray(JArray other);
        //
        // 摘要:
        //     Initializes a new instance of the Newtonsoft.Json.Linq.JArray class with the
        //     specified content.
        //
        // 参数:
        //   content:
        //     The contents of the array.
        public JArray(params object[] content);
        //
        // 摘要:
        //     Initializes a new instance of the Newtonsoft.Json.Linq.JArray class with the
        //     specified content.
        //
        // 参数:
        //   content:
        //     The contents of the array.
        public JArray(object content);

        //
        // 摘要:
        //     Gets the Newtonsoft.Json.Linq.JToken with the specified key.
        //
        // 值:
        //     The Newtonsoft.Json.Linq.JToken with the specified key.
        public override JToken? this[object key] { get; set; }
        //
        // 摘要:
        //     Gets or sets the Newtonsoft.Json.Linq.JToken at the specified index.
        public JToken this[int index] { get; set; }

        //
        // 摘要:
        //     Gets the node type for this Newtonsoft.Json.Linq.JToken.
        //
        // 值:
        //     The type.
        public override JTokenType Type { get; }
        //
        // 摘要:
        //     Gets a value indicating whether the Newtonsoft.Json.Linq.JArray is read-only.
        //
        // 返回结果:
        //     true if the Newtonsoft.Json.Linq.JArray is read-only; otherwise, false.
        public bool IsReadOnly { get; }
        //
        // 摘要:
        //     Gets the container's children tokens.
        //
        // 值:
        //     The container's children tokens.
        protected override IList<JToken> ChildrenTokens { get; }

        //
        // 摘要:
        //     Creates a Newtonsoft.Json.Linq.JArray from an object.
        //
        // 参数:
        //   o:
        //     The object that will be used to create Newtonsoft.Json.Linq.JArray.
        //
        //   jsonSerializer:
        //     The Newtonsoft.Json.JsonSerializer that will be used to read the object.
        //
        // 返回结果:
        //     A Newtonsoft.Json.Linq.JArray with the values of the specified object.
        public static JArray FromObject(object o, JsonSerializer jsonSerializer);
        //
        // 摘要:
        //     Creates a Newtonsoft.Json.Linq.JArray from an object.
        //
        // 参数:
        //   o:
        //     The object that will be used to create Newtonsoft.Json.Linq.JArray.
        //
        // 返回结果:
        //     A Newtonsoft.Json.Linq.JArray with the values of the specified object.
        public static JArray FromObject(object o);
        //
        // 摘要:
        //     Loads an Newtonsoft.Json.Linq.JArray from a Newtonsoft.Json.JsonReader.
        //
        // 参数:
        //   reader:
        //     A Newtonsoft.Json.JsonReader that will be read for the content of the Newtonsoft.Json.Linq.JArray.
        //
        // 返回结果:
        //     A Newtonsoft.Json.Linq.JArray that contains the JSON that was read from the specified
        //     Newtonsoft.Json.JsonReader.
        public static JArray Load(JsonReader reader);
        //
        // 摘要:
        //     Loads an Newtonsoft.Json.Linq.JArray from a Newtonsoft.Json.JsonReader.
        //
        // 参数:
        //   reader:
        //     A Newtonsoft.Json.JsonReader that will be read for the content of the Newtonsoft.Json.Linq.JArray.
        //
        //   settings:
        //     The Newtonsoft.Json.Linq.JsonLoadSettings used to load the JSON. If this is null,
        //     default load settings will be used.
        //
        // 返回结果:
        //     A Newtonsoft.Json.Linq.JArray that contains the JSON that was read from the specified
        //     Newtonsoft.Json.JsonReader.
        public static JArray Load(JsonReader reader, JsonLoadSettings? settings);
        //
        // 摘要:
        //     Asynchronously loads a Newtonsoft.Json.Linq.JArray from a Newtonsoft.Json.JsonReader.
        //
        // 参数:
        //   reader:
        //     A Newtonsoft.Json.JsonReader that will be read for the content of the Newtonsoft.Json.Linq.JArray.
        //     If this is null, default load settings will be used.
        //
        //   cancellationToken:
        //     The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None.
        //
        // 返回结果:
        //     A System.Threading.Tasks.Task`1 representing the asynchronous load. The System.Threading.Tasks.Task`1.Result
        //     property contains the JSON that was read from the specified Newtonsoft.Json.JsonReader.
        public static Task<JArray> LoadAsync(JsonReader reader, CancellationToken cancellationToken = default);
        //
        // 摘要:
        //     Asynchronously loads a Newtonsoft.Json.Linq.JArray from a Newtonsoft.Json.JsonReader.
        //
        // 参数:
        //   reader:
        //     A Newtonsoft.Json.JsonReader that will be read for the content of the Newtonsoft.Json.Linq.JArray.
        //
        //   settings:
        //     The Newtonsoft.Json.Linq.JsonLoadSettings used to load the JSON. If this is null,
        //     default load settings will be used.
        //
        //   cancellationToken:
        //     The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None.
        //
        // 返回结果:
        //     A System.Threading.Tasks.Task`1 representing the asynchronous load. The System.Threading.Tasks.Task`1.Result
        //     property contains the JSON that was read from the specified Newtonsoft.Json.JsonReader.
        [AsyncStateMachine(typeof(<LoadAsync>d__2))]
        public static Task<JArray> LoadAsync(JsonReader reader, JsonLoadSettings? settings, CancellationToken cancellationToken = default);
        //
        // 摘要:
        //     Load a Newtonsoft.Json.Linq.JArray from a string that contains JSON.
        //
        // 参数:
        //   json:
        //     A System.String that contains JSON.
        //
        //   settings:
        //     The Newtonsoft.Json.Linq.JsonLoadSettings used to load the JSON. If this is null,
        //     default load settings will be used.
        //
        // 返回结果:
        //     A Newtonsoft.Json.Linq.JArray populated from the string that contains JSON.
        public static JArray Parse(string json, JsonLoadSettings? settings);
        //
        // 摘要:
        //     Load a Newtonsoft.Json.Linq.JArray from a string that contains JSON.
        //
        // 参数:
        //   json:
        //     A System.String that contains JSON.
        //
        // 返回结果:
        //     A Newtonsoft.Json.Linq.JArray populated from the string that contains JSON.
        public static JArray Parse(string json);
        //
        // 摘要:
        //     Adds an item to the Newtonsoft.Json.Linq.JArray.
        //
        // 参数:
        //   item:
        //     The object to add to the Newtonsoft.Json.Linq.JArray.
        public void Add(JToken item);
        //
        // 摘要:
        //     Removes all items from the Newtonsoft.Json.Linq.JArray.
        public void Clear();
        //
        // 摘要:
        //     Determines whether the Newtonsoft.Json.Linq.JArray contains a specific value.
        //
        // 参数:
        //   item:
        //     The object to locate in the Newtonsoft.Json.Linq.JArray.
        //
        // 返回结果:
        //     true if item is found in the Newtonsoft.Json.Linq.JArray; otherwise, false.
        public bool Contains(JToken item);
        //
        // 摘要:
        //     Copies the elements of the Newtonsoft.Json.Linq.JArray to an array, starting
        //     at a particular array index.
        //
        // 参数:
        //   array:
        //     The array.
        //
        //   arrayIndex:
        //     Index of the array.
        public void CopyTo(JToken[] array, int arrayIndex);
        //
        // 摘要:
        //     Returns an enumerator that iterates through the collection.
        //
        // 返回结果:
        //     A System.Collections.Generic.IEnumerator`1 of Newtonsoft.Json.Linq.JToken that
        //     can be used to iterate through the collection.
        public IEnumerator<JToken> GetEnumerator();
        //
        // 摘要:
        //     Determines the index of a specific item in the Newtonsoft.Json.Linq.JArray.
        //
        // 参数:
        //   item:
        //     The object to locate in the Newtonsoft.Json.Linq.JArray.
        //
        // 返回结果:
        //     The index of item if found in the list; otherwise, -1.
        public int IndexOf(JToken item);
        //
        // 摘要:
        //     Inserts an item to the Newtonsoft.Json.Linq.JArray at the specified index.
        //
        // 参数:
        //   index:
        //     The zero-based index at which item should be inserted.
        //
        //   item:
        //     The object to insert into the Newtonsoft.Json.Linq.JArray.
        //
        // 异常:
        //   T:System.ArgumentOutOfRangeException:
        //     index is not a valid index in the Newtonsoft.Json.Linq.JArray.
        public void Insert(int index, JToken item);
        //
        // 摘要:
        //     Removes the first occurrence of a specific object from the Newtonsoft.Json.Linq.JArray.
        //
        // 参数:
        //   item:
        //     The object to remove from the Newtonsoft.Json.Linq.JArray.
        //
        // 返回结果:
        //     true if item was successfully removed from the Newtonsoft.Json.Linq.JArray; otherwise,
        //     false. This method also returns false if item is not found in the original Newtonsoft.Json.Linq.JArray.
        public bool Remove(JToken item);
        //
        // 摘要:
        //     Removes the Newtonsoft.Json.Linq.JArray item at the specified index.
        //
        // 参数:
        //   index:
        //     The zero-based index of the item to remove.
        //
        // 异常:
        //   T:System.ArgumentOutOfRangeException:
        //     index is not a valid index in the Newtonsoft.Json.Linq.JArray.
        public void RemoveAt(int index);
        //
        // 摘要:
        //     Writes this token to a Newtonsoft.Json.JsonWriter.
        //
        // 参数:
        //   writer:
        //     A Newtonsoft.Json.JsonWriter into which this method will write.
        //
        //   converters:
        //     A collection of Newtonsoft.Json.JsonConverter which will be used when writing
        //     the token.
        public override void WriteTo(JsonWriter writer, params JsonConverter[] converters);
        //
        // 摘要:
        //     Writes this token to a Newtonsoft.Json.JsonWriter asynchronously.
        //
        // 参数:
        //   writer:
        //     A Newtonsoft.Json.JsonWriter into which this method will write.
        //
        //   cancellationToken:
        //     The token to monitor for cancellation requests.
        //
        //   converters:
        //     A collection of Newtonsoft.Json.JsonConverter which will be used when writing
        //     the token.
        //
        // 返回结果:
        //     A System.Threading.Tasks.Task that represents the asynchronous write operation.
        [AsyncStateMachine(typeof(<WriteToAsync>d__0))]
        public override Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, params JsonConverter[] converters);
    }
}