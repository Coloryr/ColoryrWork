#region 程序集 MQTTnet, Version=4.0.1.184, Culture=neutral, PublicKeyToken=fdb7629f2e364a63
// C:\Users\40206\.nuget\packages\mqttnet\4.0.1.184\lib\net6.0\MQTTnet.dll
#endregion

using MQTTnet.Adapter;
using MQTTnet.Formatter;
using MQTTnet.Packets;
using MQTTnet.Protocol;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Security.Cryptography.X509Certificates;

namespace MQTTnet.Server
{
    public sealed class ValidatingConnectionEventArgs : EventArgs
    {
        public ValidatingConnectionEventArgs(MqttConnectPacket connectPacket, IMqttChannelAdapter clientAdapter);

        public string Username { get; }
        //
        // 摘要:
        //     Gets or sets the topic alias maximum. This gives the maximum length of the topic
        //     alias. A value of 0 indicates that the value is not used.
        public ushort TopicAliasMaximum { get; }
        //
        // 摘要:
        //     Gets or sets a key/value collection that can be used to share data within the
        //     scope of this session.
        public IDictionary SessionItems { get; }
        //
        // 摘要:
        //     Gets the session expiry interval. The time after a session expires when it's
        //     not actively used. A value of 0 means no expiation.
        public uint SessionExpiryInterval { get; }
        //
        // 摘要:
        //     Gets or sets the server reference. This can be used together with i.e. "Server
        //     Moved" to send a different server address to the client. MQTTv5 only.
        public string ServerReference { get; set; }
        //
        // 摘要:
        //     Gets or sets the response user properties. In MQTT 5, user properties are basic
        //     UTF-8 string key-value pairs that you can append to almost every type of MQTT
        //     packet. As long as you don’t exceed the maximum message size, you can use an
        //     unlimited number of user properties to add metadata to MQTT messages and pass
        //     information between publisher, broker, and subscriber. The feature is very similar
        //     to the HTTP header concept. Hint: MQTT 5 feature only.
        public List<MqttUserProperty> ResponseUserProperties { get; set; }
        //
        // 摘要:
        //     Gets or sets the response authentication data. MQTTv5 only.
        public byte[] ResponseAuthenticationData { get; set; }
        //
        // 摘要:
        //     Gets the request response information. Hint: MQTT 5 feature only.
        public bool RequestResponseInformation { get; }
        //
        // 摘要:
        //     Gets the request problem information. Hint: MQTT 5 feature only.
        public bool RequestProblemInformation { get; }
        //
        // 摘要:
        //     Gets or sets the receive maximum. This gives the maximum length of the receive
        //     messages. A value of 0 indicates that the value is not used.
        public ushort ReceiveMaximum { get; }
        public string ReasonString { get; set; }
        //
        // 摘要:
        //     Gets or sets the reason code. When a MQTTv3 client connects the enum value must
        //     be one which is also supported in MQTTv3. Otherwise the connection attempt will
        //     fail because not all codes can be converted properly. MQTTv5 only.
        public MqttConnectReasonCode ReasonCode { get; set; }
        public byte[] RawPassword { get; }
        public MqttProtocolVersion ProtocolVersion { get; }
        public string Password { get; }
        //
        // 摘要:
        //     A value of 0 indicates that the value is not used.
        public uint MaximumPacketSize { get; }
        //
        // 摘要:
        //     Gets or sets the keep alive period. The connection is normally left open by the
        //     client so that is can send and receive data at any time. If no data flows over
        //     an open connection for a certain time period then the client will generate a
        //     PINGREQ and expect to receive a PINGRESP from the broker. This message exchange
        //     confirms that the connection is open and working. This period is known as the
        //     keep alive period.
        public ushort? KeepAlivePeriod { get; }
        public bool IsSecureConnection { get; }
        public string Endpoint { get; }
        //
        // 摘要:
        //     Gets the client identifier. Hint: This identifier needs to be unique over all
        //     used clients / devices on the broker to avoid connection issues.
        public string ClientId { get; }
        public X509Certificate2 ClientCertificate { get; }
        //
        // 摘要:
        //     Gets or sets a value indicating whether clean sessions are used or not. When
        //     a client connects to a broker it can connect using either a non persistent connection
        //     (clean session) or a persistent connection. With a non persistent connection
        //     the broker doesn't store any subscription information or undelivered messages
        //     for the client. This mode is ideal when the client only publishes messages. It
        //     can also connect as a durable client using a persistent connection. In this mode,
        //     the broker will store subscription information, and undelivered messages for
        //     the client.
        public bool? CleanSession { get; }
        //
        // 摘要:
        //     Gets or sets the authentication method. Hint: MQTT 5 feature only.
        public string AuthenticationMethod { get; }
        //
        // 摘要:
        //     Gets or sets the authentication data. Hint: MQTT 5 feature only.
        public byte[] AuthenticationData { get; }
        //
        // 摘要:
        //     Gets or sets the assigned client identifier. MQTTv5 only.
        public string AssignedClientIdentifier { get; set; }
        //
        // 摘要:
        //     Gets or sets the user properties. In MQTT 5, user properties are basic UTF-8
        //     string key-value pairs that you can append to almost every type of MQTT packet.
        //     As long as you don’t exceed the maximum message size, you can use an unlimited
        //     number of user properties to add metadata to MQTT messages and pass information
        //     between publisher, broker, and subscriber. The feature is very similar to the
        //     HTTP header concept. Hint: MQTT 5 feature only.
        public List<MqttUserProperty> UserProperties { get; }
        //
        // 摘要:
        //     Gets or sets the will delay interval. This is the time between the client disconnect
        //     and the time the will message will be sent. A value of 0 indicates that the value
        //     is not used.
        public uint WillDelayInterval { get; }
    }
}