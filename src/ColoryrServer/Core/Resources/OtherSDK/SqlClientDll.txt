#region 程序集 System.Data.SqlClient, Version=4.6.1.3, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// C:\Users\40206\.nuget\packages\system.data.sqlclient\4.8.3\ref\netcoreapp2.1\System.Data.SqlClient.dll
#endregion

using System.Collections;
using System.Data.Common;
using System.Security;
using System.Threading;
using System.Threading.Tasks;

namespace System.Data.SqlClient
{
    //
    // 摘要:
    //     Represents a connection to a SQL Server database. This class cannot be inherited.
    public sealed class SqlConnection : DbConnection, ICloneable
    {
        //
        // 摘要:
        //     Initializes a new instance of the System.Data.SqlClient.SqlConnection class.
        public SqlConnection();
        //
        // 摘要:
        //     Initializes a new instance of the System.Data.SqlClient.SqlConnection class when
        //     given a string that contains the connection string.
        //
        // 参数:
        //   connectionString:
        //     The connection used to open the SQL Server database.
        public SqlConnection(string connectionString);
        //
        // 摘要:
        //     Initializes a new instance of the System.Data.SqlClient.SqlConnection class given
        //     a connection string, that does not use Integrated Security = true and a System.Data.SqlClient.SqlCredential
        //     object that contains the user ID and password.
        //
        // 参数:
        //   connectionString:
        //     A connection string that does not use any of the following connection string
        //     keywords: Integrated Security = true, UserId, or Password; or that does not use
        //     ContextConnection = true.
        //
        //   credential:
        //     A System.Data.SqlClient.SqlCredential object. If credential is null, System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)
        //     is functionally equivalent to System.Data.SqlClient.SqlConnection.#ctor(System.String).
        public SqlConnection(string connectionString, SqlCredential credential);

        //
        // 摘要:
        //     When set to true, enables statistics gathering for the current connection.
        //
        // 返回结果:
        //     Returns true if statistics gathering is enabled; otherwise false. false is the
        //     default.
        public bool StatisticsEnabled { get; set; }
        //
        // 摘要:
        //     Indicates the state of the System.Data.SqlClient.SqlConnection during the most
        //     recent network operation performed on the connection.
        //
        // 返回结果:
        //     An System.Data.ConnectionState enumeration.
        public override ConnectionState State { get; }
        //
        // 摘要:
        //     Gets a string that contains the version of the instance of SQL Server to which
        //     the client is connected.
        //
        // 返回结果:
        //     The version of the instance of SQL Server.
        //
        // 异常:
        //   T:System.InvalidOperationException:
        //     The connection is closed. System.Data.SqlClient.SqlConnection.ServerVersion was
        //     called while the returned Task was not completed and the connection was not opened
        //     after a call to System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken).
        public override string ServerVersion { get; }
        //
        // 摘要:
        //     Gets the size (in bytes) of network packets used to communicate with an instance
        //     of SQL Server.
        //
        // 返回结果:
        //     The size (in bytes) of network packets. The default value is 8000.
        public int PacketSize { get; }
        //
        // 摘要:
        //     Gets or sets the System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
        //     property.
        //
        // 返回结果:
        //     true if the System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
        //     property has been set; otherwise false.
        public bool FireInfoMessageEventOnUserErrors { get; set; }
        //
        // 摘要:
        //     Gets the name of the instance of SQL Server to which to connect.
        //
        // 返回结果:
        //     The name of the instance of SQL Server to which to connect. The default value
        //     is an empty string.
        public override string DataSource { get; }
        //
        // 摘要:
        //     Gets the name of the current database or the database to be used after a connection
        //     is opened.
        //
        // 返回结果:
        //     The name of the current database or the name of the database to be used after
        //     a connection is opened. The default value is an empty string.
        public override string Database { get; }
        //
        // 摘要:
        //     Gets or sets the System.Data.SqlClient.SqlCredential object for this connection.
        //
        // 返回结果:
        //     The System.Data.SqlClient.SqlCredential object for this connection.
        public SqlCredential Credential { get; set; }
        //
        // 摘要:
        //     Gets the time to wait while trying to establish a connection before terminating
        //     the attempt and generating an error.
        //
        // 返回结果:
        //     The time (in seconds) to wait for a connection to open. The default value is
        //     15 seconds.
        //
        // 异常:
        //   T:System.ArgumentException:
        //     The value set is less than 0.
        public override int ConnectionTimeout { get; }
        //
        // 摘要:
        //     Gets or sets the string used to open a SQL Server database.
        //
        // 返回结果:
        //     The connection string that includes the source database name, and other parameters
        //     needed to establish the initial connection. The default value is an empty string.
        //
        // 异常:
        //   T:System.ArgumentException:
        //     An invalid connection string argument has been supplied, or a required connection
        //     string argument has not been supplied.
        public override string ConnectionString { get; set; }
        //
        // 摘要:
        //     The connection ID of the most recent connection attempt, regardless of whether
        //     the attempt succeeded or failed.
        //
        // 返回结果:
        //     The connection ID of the most recent connection attempt.
        public Guid ClientConnectionId { get; }
        //
        // 摘要:
        //     Gets or sets the access token for the connection.
        //
        // 返回结果:
        //     The access token for the connection.
        public string AccessToken { get; set; }
        //
        // 摘要:
        //     Gets a string that identifies the database client.
        //
        // 返回结果:
        //     A string that identifies the database client. If not specified, the name of the
        //     client computer. If neither is specified, the value is an empty string.
        public string WorkstationId { get; }

        //
        // 摘要:
        //     Occurs when SQL Server returns a warning or informational message.
        public event SqlInfoMessageEventHandler InfoMessage;

        //
        // 摘要:
        //     Changes the SQL Server password for the user indicated in the System.Data.SqlClient.SqlCredential
        //     object.
        //
        // 参数:
        //   connectionString:
        //     The connection string that contains enough information to connect to a server.
        //     The connection string should not use any of the following connection string keywords:
        //     Integrated Security = true, UserId, or Password; or ContextConnection = true.
        //
        //   credential:
        //     A System.Data.SqlClient.SqlCredential object.
        //
        //   newPassword:
        //     The new password.newPassword must be read only. The password must also comply
        //     with any password security policy set on the server (for example, minimum length
        //     and requirements for specific characters).
        //
        // 异常:
        //   T:System.ArgumentException:
        //     The connection string contains any combination of UserId, Password, or Integrated
        //     Security=true. -or- The connection string contains Context Connection=true. -or-
        //     newSecurePassword (or newPassword) is greater than 128 characters. -or- newSecurePassword
        //     (or newPassword) is not read only. -or- newSecurePassword (or newPassword) is
        //     an empty string.
        //
        //   T:System.ArgumentNullException:
        //     One of the parameters (connectionString, credential, or newSecurePassword) is
        //     null.
        public static void ChangePassword(string connectionString, SqlCredential credential, SecureString newPassword);
        //
        // 摘要:
        //     Changes the SQL Server password for the user indicated in the connection string
        //     to the supplied new password.
        //
        // 参数:
        //   connectionString:
        //     The connection string that contains enough information to connect to the server
        //     that you want. The connection string must contain the user ID and the current
        //     password.
        //
        //   newPassword:
        //     The new password to set. This password must comply with any password security
        //     policy set on the server, including minimum length, requirements for specific
        //     characters, and so on.
        //
        // 异常:
        //   T:System.ArgumentException:
        //     The connection string includes the option to use integrated security. Or The
        //     newPassword exceeds 128 characters.
        //
        //   T:System.ArgumentNullException:
        //     Either the connectionString or the newPassword parameter is null.
        public static void ChangePassword(string connectionString, string newPassword);
        //
        // 摘要:
        //     Empties the connection pool.
        public static void ClearAllPools();
        //
        // 摘要:
        //     Empties the connection pool associated with the specified connection.
        //
        // 参数:
        //   connection:
        //     The System.Data.SqlClient.SqlConnection to be cleared from the pool.
        public static void ClearPool(SqlConnection connection);
        //
        // 摘要:
        //     Starts a database transaction.
        //
        // 返回结果:
        //     An object representing the new transaction.
        //
        // 异常:
        //   T:System.Data.SqlClient.SqlException:
        //     Parallel transactions are not allowed when using Multiple Active Result Sets
        //     (MARS).
        //
        //   T:System.InvalidOperationException:
        //     Parallel transactions are not supported.
        public SqlTransaction BeginTransaction();
        //
        // 摘要:
        //     Starts a database transaction with the specified isolation level.
        //
        // 参数:
        //   iso:
        //     The isolation level under which the transaction should run.
        //
        // 返回结果:
        //     An object representing the new transaction.
        //
        // 异常:
        //   T:System.Data.SqlClient.SqlException:
        //     Parallel transactions are not allowed when using Multiple Active Result Sets
        //     (MARS).
        //
        //   T:System.InvalidOperationException:
        //     Parallel transactions are not supported.
        public SqlTransaction BeginTransaction(IsolationLevel iso);
        //
        // 摘要:
        //     Starts a database transaction with the specified isolation level and transaction
        //     name.
        //
        // 参数:
        //   iso:
        //     The isolation level under which the transaction should run.
        //
        //   transactionName:
        //     The name of the transaction.
        //
        // 返回结果:
        //     An object representing the new transaction.
        //
        // 异常:
        //   T:System.Data.SqlClient.SqlException:
        //     Parallel transactions are not allowed when using Multiple Active Result Sets
        //     (MARS).
        //
        //   T:System.InvalidOperationException:
        //     Parallel transactions are not supported.
        public SqlTransaction BeginTransaction(IsolationLevel iso, string transactionName);
        //
        // 摘要:
        //     Starts a database transaction with the specified transaction name.
        //
        // 参数:
        //   transactionName:
        //     The name of the transaction.
        //
        // 返回结果:
        //     An object representing the new transaction.
        //
        // 异常:
        //   T:System.Data.SqlClient.SqlException:
        //     Parallel transactions are not allowed when using Multiple Active Result Sets
        //     (MARS).
        //
        //   T:System.InvalidOperationException:
        //     Parallel transactions are not supported.
        public SqlTransaction BeginTransaction(string transactionName);
        //
        // 摘要:
        //     Changes the current database for an open System.Data.SqlClient.SqlConnection.
        //
        // 参数:
        //   database:
        //     The name of the database to use instead of the current database.
        //
        // 异常:
        //   T:System.ArgumentException:
        //     The database name is not valid.
        //
        //   T:System.InvalidOperationException:
        //     The connection is not open.
        //
        //   T:System.Data.SqlClient.SqlException:
        //     Cannot change the database.
        public override void ChangeDatabase(string database);
        //
        // 摘要:
        //     Closes the connection to the database. This is the preferred method of closing
        //     any open connection.
        //
        // 异常:
        //   T:System.Data.SqlClient.SqlException:
        //     The connection-level error that occurred while opening the connection.
        public override void Close();
        //
        // 摘要:
        //     Creates and returns a System.Data.SqlClient.SqlCommand object associated with
        //     the System.Data.SqlClient.SqlConnection.
        //
        // 返回结果:
        //     A System.Data.SqlClient.SqlCommand object.
        public SqlCommand CreateCommand();
        //
        // 摘要:
        //     Returns schema information for the data source of this System.Data.SqlClient.SqlConnection
        //     using the specified string for the schema name.
        //
        // 参数:
        //   collectionName:
        //     Specifies the name of the schema to return.
        //
        // 返回结果:
        //     A System.Data.DataTable that contains schema information.
        //
        // 异常:
        //   T:System.ArgumentException:
        //     collectionName is specified as null.
        public override DataTable GetSchema(string collectionName);
        //
        // 摘要:
        //     Returns schema information for the data source of this System.Data.SqlClient.SqlConnection.
        //     For more information about scheme, see SQL Server Schema Collections.
        //
        // 返回结果:
        //     A System.Data.DataTable that contains schema information.
        public override DataTable GetSchema();
        //
        // 摘要:
        //     Returns schema information for the data source of this System.Data.SqlClient.SqlConnection
        //     using the specified string for the schema name and the specified string array
        //     for the restriction values.
        //
        // 参数:
        //   collectionName:
        //     Specifies the name of the schema to return.
        //
        //   restrictionValues:
        //     A set of restriction values for the requested schema.
        //
        // 返回结果:
        //     A System.Data.DataTable that contains schema information.
        //
        // 异常:
        //   T:System.ArgumentException:
        //     collectionName is specified as null.
        public override DataTable GetSchema(string collectionName, string[] restrictionValues);
        //
        // 摘要:
        //     Opens a database connection with the property settings specified by the System.Data.SqlClient.SqlConnection.ConnectionString.
        //
        // 异常:
        //   T:System.InvalidOperationException:
        //     Cannot open a connection without specifying a data source or server. or The connection
        //     is already open.
        //
        //   T:System.Data.SqlClient.SqlException:
        //     A connection-level error occurred while opening the connection. If the System.Data.SqlClient.SqlException.Number
        //     property contains the value 18487 or 18488, this indicates that the specified
        //     password has expired or must be reset. See the System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)
        //     method for more information. The <system.data.localdb> tag in the app.config
        //     file has invalid or unknown elements.
        //
        //   T:System.Configuration.ConfigurationErrorsException:
        //     There are two entries with the same name in the <localdbinstances> section.
        public override void Open();
        //
        // 摘要:
        //     An asynchronous version of System.Data.SqlClient.SqlConnection.Open, which opens
        //     a database connection with the property settings specified by the System.Data.SqlClient.SqlConnection.ConnectionString.
        //     The cancellation token can be used to request that the operation be abandoned
        //     before the connection timeout elapses. Exceptions will be propagated via the
        //     returned Task. If the connection timeout time elapses without successfully connecting,
        //     the returned Task will be marked as faulted with an Exception. The implementation
        //     returns a Task without blocking the calling thread for both pooled and non-pooled
        //     connections.
        //
        // 参数:
        //   cancellationToken:
        //     The cancellation instruction.
        //
        // 返回结果:
        //     A task representing the asynchronous operation.
        //
        // 异常:
        //   T:System.InvalidOperationException:
        //     Calling System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)
        //     more than once for the same instance before task completion. Context Connection=true
        //     is specified in the connection string. A connection was not available from the
        //     connection pool before the connection time out elapsed.
        //
        //   T:System.Data.SqlClient.SqlException:
        //     Any error returned by SQL Server that occurred while opening the connection.
        public override Task OpenAsync(CancellationToken cancellationToken);
        //
        // 摘要:
        //     If statistics gathering is enabled, all values are reset to zero.
        public void ResetStatistics();
        //
        // 摘要:
        //     Returns a name value pair collection of statistics at the point in time the method
        //     is called.
        //
        // 返回结果:
        //     Returns a reference of type System.Collections.IDictionary of System.Collections.DictionaryEntry
        //     items.
        public IDictionary RetrieveStatistics();
        protected override DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
        protected override DbCommand CreateDbCommand();
        protected override void Dispose(bool disposing);
    }
}