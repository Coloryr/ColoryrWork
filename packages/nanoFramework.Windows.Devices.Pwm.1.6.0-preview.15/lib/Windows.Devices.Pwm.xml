<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Windows.Devices.Pwm</name>
    </assembly>
    <members>
        <member name="T:Windows.Devices.Pwm.PwmController">
            <summary>
            Represents a PWM controller connected to the system.
            </summary>
        </member>
        <member name="P:Windows.Devices.Pwm.PwmController.ActualFrequency">
            <summary>
            Gets the actual frequency of the PWM.
            </summary>
            <value>
            The frequency in Hz.
            </value>
        </member>
        <member name="P:Windows.Devices.Pwm.PwmController.MaxFrequency">
            <summary>
            Gets the maximum frequency offered by the controller.
            </summary>
            <value>
            The maximum frequency in Hz.
            </value>
        </member>
        <member name="P:Windows.Devices.Pwm.PwmController.MinFrequency">
            <summary>
            Gets the minimum frequency offered by the controller.
            </summary>
            <value>
            The minimum frequency in Hz.
            </value>
        </member>
        <member name="P:Windows.Devices.Pwm.PwmController.PinCount">
            <summary>
            Gets the number of pins available on the system.
            </summary>
            <value>
            The number of pins.
            </value>
        </member>
        <member name="M:Windows.Devices.Pwm.PwmController.FromId(System.String)">
            <summary>
            Initializes a PWM controller instance based on the given DeviceInformation ID.
            </summary>
            <param name="deviceId">
            The acquired DeviceInformation ID.
            </param>
            <returns>
            PwmController
            </returns>
        </member>
        <member name="M:Windows.Devices.Pwm.PwmController.GetDefault">
            <summary>
            Gets the default PWM controller on the system.
            </summary>
            <returns>
            The default PWM controller on the system, or null if the system has no PWM controller.
            </returns>
        </member>
        <member name="M:Windows.Devices.Pwm.PwmController.OpenPin(System.Int32)">
            <summary>
            Opens the pin for use.
            </summary>
            <param name="pinNumber">
            Which pin to open.
            </param>
            <returns>
            The requested pin now available for use.
            </returns>
        </member>
        <member name="M:Windows.Devices.Pwm.PwmController.SetDesiredFrequency(System.Double)">
            <summary>
            Sets the PWM frequency.
            </summary>
            <param name="desiredFrequency">
            Then value of the desired frequency in Hz.
            </param>
            <returns>
            The actual frequency that was set. This will be the closest supported match as determined by the provider.
            </returns>
        </member>
        <member name="M:Windows.Devices.Pwm.PwmController.GetDeviceSelector">
            <summary>
            Retrieves an Advanced Query Syntax (AQS) string for all the PWM controllers on the system. You can use this string with the DeviceInformation.FindAllAsync method to get DeviceInformation objects for those controllers.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Windows.Devices.Pwm.PwmControllerManager.ControllersCollection">
            <summary>
            <see cref="T:Windows.Devices.Pwm.PwmController"/> collection.
            </summary>
            <remarks>
            This collection is for internal use only.
            </remarks>
        </member>
        <member name="T:Windows.Devices.Pwm.PwmPin">
            <summary>
            Represents a single PWM pin on the system.
            </summary>
        </member>
        <member name="P:Windows.Devices.Pwm.PwmPin.Controller">
            <summary>
            Gets the PWM controller in use by this pin.
            </summary>
            <value>
            The controller.
            </value>
        </member>
        <member name="P:Windows.Devices.Pwm.PwmPin.IsStarted">
            <summary>
            Gets the started state of the pin.
            </summary>
            <value>
            True if the PWM has started on this pin, otherwise false.
            </value>
        </member>
        <member name="P:Windows.Devices.Pwm.PwmPin.Polarity">
            <summary>
            Gets or sets the polarity of the pin.
            </summary>
            <value>
            The pin polarity.
            </value>
        </member>
        <member name="M:Windows.Devices.Pwm.PwmPin.GetActiveDutyCyclePercentage">
            <summary>
            Retrieves the duty cycle percentage for this pin.
            </summary>
            <returns>
            The duty cycle percentage, between 0.0 and 1.0.
            </returns>
        </member>
        <member name="M:Windows.Devices.Pwm.PwmPin.SetActiveDutyCyclePercentage(System.Double)">
            <summary>
            Sets the duty cycle percentage for this pin.
            </summary>
            <param name="dutyCyclePercentage">
            The desired duty cycle percentage, represented as a value between 0.0 and 1.0.
            </param>
        </member>
        <member name="M:Windows.Devices.Pwm.PwmPin.Start">
            <summary>
            Starts the PWM on this pin.
            </summary>
        </member>
        <member name="M:Windows.Devices.Pwm.PwmPin.Stop">
            <summary>
            Stops the PWM on this pin.
            </summary>
        </member>
        <member name="T:Windows.Devices.Pwm.PwmPulsePolarity">
            <summary>
            Describes which polarity the PWM signal should start in.
            </summary>
        </member>
        <member name="F:Windows.Devices.Pwm.PwmPulsePolarity.ActiveHigh">
            <summary>
            Configures the PWM signal to start in the active high state.
            </summary>
        </member>
        <member name="F:Windows.Devices.Pwm.PwmPulsePolarity.ActiveLow">
            <summary>
            Configures the PWM signal to start in the active low state.
            </summary>
        </member>
    </members>
</doc>
