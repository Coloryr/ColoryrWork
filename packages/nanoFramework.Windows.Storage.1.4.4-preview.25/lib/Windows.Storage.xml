<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Windows.Storage</name>
    </assembly>
    <members>
        <member name="T:Windows.Storage.CreationCollisionOption">
            <summary>
            Specifies what to do if a file or folder with the specified name already exists in the current folder when you create a new file or folder.
            </summary>
        </member>
        <member name="F:Windows.Storage.CreationCollisionOption.FailIfExists">
            <summary>
            Raise an exception of type System.Exception if the file or folder already exists.
            Methods that don't explicitly pass a value from the <see cref="T:Windows.Storage.CreationCollisionOption"/> enumeration use the FailIfExists value as the default when you try to create, rename, copy, or move a file or folder.
            </summary>
        </member>
        <member name="F:Windows.Storage.CreationCollisionOption.GenerateUniqueName">
            <summary>
            Automatically append a number to the base of the specified name if the file or folder already exists.
            For example, if MyFile.txt already exists, then the new file is named MyFile(2).txt.If MyFolder already exists, then the new folder is named MyFolder(2).
            </summary>
        </member>
        <member name="F:Windows.Storage.CreationCollisionOption.OpenIfExists">
            <summary>
            Return the existing item if the file or folder already exists.
            </summary>
        </member>
        <member name="F:Windows.Storage.CreationCollisionOption.ReplaceExisting">
            <summary>
            Replace the existing item if the file or folder already exists.
            </summary>
        </member>
        <member name="T:Windows.Storage.FileAttributes">
            <summary>
            Describes the attributes of a file or folder.
            This enumeration has a System.FlagsAttribute attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Windows.Storage.FileAttributes.Archive">
            <summary>
            The item is archived.
            </summary>
        </member>
        <member name="F:Windows.Storage.FileAttributes.Directory">
            <summary>
            The item is a directory.
            </summary>
        </member>
        <member name="F:Windows.Storage.FileAttributes.LocallyIncomplete">
            <summary>
            The item is locally incomplete. Windows only.
            </summary>
        </member>
        <member name="F:Windows.Storage.FileAttributes.Normal">
            <summary>
            The item is normal. That is, the item doesn't have any of the other values in the enumeration.
            </summary>
        </member>
        <member name="F:Windows.Storage.FileAttributes.ReadOnly">
            <summary>
            The item is read-only.
            </summary>
        </member>
        <member name="F:Windows.Storage.FileAttributes.Temporary">
            <summary>
            The item is a temporary file.
            </summary>
        </member>
        <member name="T:Windows.Storage.FileIO">
            <summary>
            Provides helper methods for reading and writing files that are represented by objects of type IStorageFile.
            </summary>
        </member>
        <member name="M:Windows.Storage.FileIO.ReadBuffer(Windows.Storage.IStorageFile)">
             <summary>
             Reads the contents of the specified file and returns a buffer.
             </summary>
             <param name="file">The file to read.</param>
             <returns>
             When this method completes, it returns an object (type <see cref="T:Windows.Storage.Streams.IBuffer"/>) that represents the contents of the file.
             </returns>
            <remarks>
             This method is exclusive of nanoFramework and it's not available in the UWP API.
             The equivalent method would be ReadBufferAsync(IStorageFile).
            </remarks>
        </member>
        <member name="M:Windows.Storage.FileIO.ReadText(Windows.Storage.IStorageFile)">
             <summary>
             Reads the contents of the specified file and returns text.
             </summary>
             <param name="file">The file to read.</param>
             <returns>
             When this method completes successfully, it returns the contents of the file as a text string.
             </returns>
            <remarks>
             The encoding will always be <see cref="F:Windows.Storage.Streams.UnicodeEncoding.Utf8"/> which is the only supported encoding in nanoFramework.
             
             This method is exclusive of nanoFramework and it's not available in the UWP API.
             The equivalent method would be ReadTextAsync(IStorageFile).
            </remarks>
        </member>
        <member name="M:Windows.Storage.FileIO.WriteBuffer(Windows.Storage.IStorageFile,Windows.Storage.Streams.IBuffer)">
             <summary>
             Writes data from a buffer to the specified file.
             </summary>
             <param name="file">The file that the buffer of data is written to.</param>
             <param name="buffer">The buffer that contains the data to write.</param>
            <remarks>
             This method is exclusive of nanoFramework and it's not available in the UWP API.
             The equivalent method would be WriteBuffer(IStorageFile, IBuffer).
            </remarks>
        </member>
        <member name="M:Windows.Storage.FileIO.WriteBytes(Windows.Storage.IStorageFile,System.Byte[])">
             <summary>
             Writes an array of bytes of data to the specified file.
             </summary>
             <param name="file">The file that the byte is written to.</param>
             <param name="buffer">The array of bytes to write.</param>
            <remarks>
             This method is exclusive of nanoFramework and it's not available in the UWP API.
             The equivalent method would be WriteBytesAsync(IStorageFile, Byte[]).
            </remarks>
        </member>
        <member name="M:Windows.Storage.FileIO.WriteText(Windows.Storage.IStorageFile,System.String)">
             <summary>
             Writes text to the specified file.
             </summary>
             <param name="file">The file that the text is written to.</param>
             <param name="contents">The text to write.</param>
             <return>
             No object or value is returned when this method completes.
             </return>
            <remarks>
             The encoding will always be <see cref="F:Windows.Storage.Streams.UnicodeEncoding.Utf8"/> which is the only supported encoding in nanoFramework.
             
             This method is exclusive of nanoFramework and it's not available in the UWP API.
             The equivalent method would be WriteTextAsync(IStorageFile, String).
            </remarks>
        </member>
        <member name="T:Windows.Storage.IStorageFile">
            <summary>
            Represents a file. Provides information about the file and its contents, and ways to manipulate them.
            </summary>
        </member>
        <member name="P:Windows.Storage.IStorageFile.ContentType">
            <summary>
            Gets the MIME type of the contents of the file.
            </summary>
        </member>
        <member name="P:Windows.Storage.IStorageFile.FileType">
            <summary>
            Gets the type (file name extension) of the file.
            </summary>
        </member>
        <member name="T:Windows.Storage.IStorageFolder">
            <summary>
            Manipulates folders and their contents, and provides information about them.
            </summary>
        </member>
        <member name="T:Windows.Storage.IStorageItem">
            <summary>
            Manipulates storage items (files and folders) and their contents, and provides information about them.
            </summary>
        </member>
        <member name="P:Windows.Storage.IStorageItem.Attributes">
            <summary>
            Gets the attributes of a file.
            </summary>
            <value>
            The file attributes.
            </value>
        </member>
        <member name="P:Windows.Storage.IStorageItem.DateCreated">
            <summary>
            Gets the date and time that the current folder was created.
            </summary>
            <remarks>
            This is the nanoFrameowrk equivalent of UWP DateCreated of type DateTimeOffset.
            </remarks>
        </member>
        <member name="P:Windows.Storage.IStorageItem.Name">
            <summary>
            Gets the name of the item including the file name extension if there is one.
            </summary>
        </member>
        <member name="P:Windows.Storage.IStorageItem.Path">
            <summary>
            Gets the full file-system path of the item, if the item has a path.
            </summary>
        </member>
        <member name="M:Windows.Storage.IStorageItem.Rename(System.String)">
            <summary>
            Renames the current item.
            </summary>
            <param name="desiredName">The desired, new name of the item.</param>
        </member>
        <member name="T:Windows.Storage.IStorageProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Windows.Storage.KnownFolderId">
            <summary>
            Provides values that identify storage folders.
            </summary>
        </member>
        <member name="F:Windows.Storage.KnownFolderId.RemovableDevices">
            <summary>
            Removable devices folder.
            </summary>
        </member>
        <member name="F:Windows.Storage.KnownFolderId.InternalDevices">
            <summary>
            Internal devices.
            </summary>
        </member>
        <member name="T:Windows.Storage.KnownFolders">
            <summary>
            Provides access to common locations that contain user content. This includes content from a user's local libraries (such as Documents, Pictures, Music, and Videos), HomeGroup, removable devices, and media server devices.
            </summary>
        </member>
        <member name="P:Windows.Storage.KnownFolders.RemovableDevices">
            <summary>
            Gets the removable devices folder.
            </summary>
        </member>
        <member name="P:Windows.Storage.KnownFolders.InternalDevices">
            <summary>
            Gets the internal devices folder.
            </summary>
        </member>
        <member name="T:Windows.Storage.Search.CommonFileQuery">
            <summary>
            Specifies how to sort the files in the query results and determines whether the query is shallow or deep. Query results for deep queries include all files in all of the subfolders of the current folder, sorted according to the specified option.
            </summary>
        </member>
        <member name="F:Windows.Storage.Search.CommonFileQuery.DefaultQuery">
            <summary>
            A shallow list of files in the current folder, similar to the list that File Explorer provides.
            You can use this option for any storage location.
            </summary>
        </member>
        <member name="F:Windows.Storage.Search.CommonFileQuery.OrderByName">
             <summary>
             A deep, flat list of files in a folder and its subfolders, sorted by System.ItemNameDisplay.
             You can use this option for any storage location.
             </summary>
            <remarks>
             This method is not available in nanoFramework.
            </remarks>
        </member>
        <member name="F:Windows.Storage.Search.CommonFileQuery.OrderByTitle">
             <summary>
             A deep, flat list of files in a folder and its subfolders, sorted by System.Title.
             You can use this option only for folders in a library or the HomeGroup folder.
             </summary>
            <remarks>
             This method is not available in nanoFramework.
            </remarks>
        </member>
        <member name="F:Windows.Storage.Search.CommonFileQuery.OrderByMusicProperties">
             <summary>
             A deep, flat list of files in a folder and its subfolders, sorted by music properties.
             You can use this option only for folders in a library or the HomeGroup folder.
             </summary>
            <remarks>
             This method is not available in nanoFramework.
            </remarks>
        </member>
        <member name="F:Windows.Storage.Search.CommonFileQuery.OrderBySearchRank">
             <summary>
             A deep, flat list of files in a folder and its subfolders, sorted by System.Search.Rank followed by System.DateModified.
             You can use this option for any storage location.
             </summary>
            <remarks>
             This method is not available in nanoFramework.
            </remarks>
        </member>
        <member name="F:Windows.Storage.Search.CommonFileQuery.OrderByDate">
             <summary>
             A deep, flat list of files in a folder and its subfolders, sorted by System.ItemDate.
             You can use this option only for folders in a library or the HomeGroup folder.
             </summary>
            <remarks>
             This method is not available in nanoFramework.
            </remarks>
        </member>
        <member name="T:Windows.Storage.Devices.SDCard">
            <summary>
            Class to allow a single SDCard to be mounted on the system.
            Only allows for 1 device to be mounted, either via MMC or SPI
            </summary>
        </member>
        <member name="P:Windows.Storage.Devices.SDCard.IsMounted">
            <summary>
            Indcates if the SDscard has been mounted
            </summary>
        </member>
        <member name="M:Windows.Storage.Devices.SDCard.MountMMC(System.Boolean)">
            <summary>
            Mount the SDcard device on the MMC interface 
            </summary>
            <param name="Data1bit">If true denotes 1 bit data path will be used otherwise it will be 4 bits.</param>
            <remarks>
            This will try to mount the SDCard on the specified interface.
            If the Card is not present or the card is unable to be read then an exception will be thrown.
            </remarks>
        </member>
        <member name="M:Windows.Storage.Devices.SDCard.MountSpi(System.String,System.Int32)">
            <summary>
            Mount the SPI SDcard device on the specified SPI bus 
            </summary>
            <param name="SpiController">The name for the SPI device, i.e "SPI1" </param>
            <param name="ChipSelect">The GPIO pin used for chip select on SDcard.</param>
            <remarks>
            This will try to mount the SDCard on the specified interface.
            If the Card is not present or the card is unable to be read then an exception will be thrown.
            </remarks>
        </member>
        <member name="M:Windows.Storage.Devices.SDCard.Unmount">
            <summary>
            Unmount the mounted SDcard.
            </summary>
        </member>
        <member name="T:Windows.Storage.RemovableDeviceEventHandler">
            <summary>
            Provides an event handler that is called when a Removable Device event occurs.
            </summary>
            <param name="sender">Specifies the object that sent the Removable Device event. </param>
            <param name="e">Contains the Removable Device event arguments. </param>
        </member>
        <member name="T:Windows.Storage.StorageEventManager">
            <summary>
            Event manager for Storage events.
            </summary>
        </member>
        <member name="E:Windows.Storage.StorageEventManager.RemovableDeviceInserted">
            <summary>
            Event that occurs when a Removable Device is inserted.
            </summary>
            <remarks>
            The <see cref="T:Windows.Storage.StorageEventManager"/> class raises <see cref="T:Windows.Storage.RemovableDeviceEventArgs"/> events when Removable Devices (typically SD Cards and USB mass storage device) are inserted and removed.
            
            To have a <see cref="T:Windows.Storage.StorageEventManager"/> object call an event-handling method when a <see cref="E:Windows.Storage.StorageEventManager.RemovableDeviceInserted"/> event occurs, 
            you must associate the method with a <see cref="T:Windows.Storage.RemovableDeviceEventHandler"/> delegate, and add this delegate to this event. 
            </remarks>
        </member>
        <member name="E:Windows.Storage.StorageEventManager.RemovableDeviceRemoved">
            <summary>
            Event that occurs when a Removable Device is removed.
            </summary>
            <remarks>
            The <see cref="T:Windows.Storage.StorageEventManager"/> class raises <see cref="T:Windows.Storage.RemovableDeviceEventArgs"/> events when Removable Devices (typically SD Cards and USB mass storage device) are inserted and removed.
            
            To have a <see cref="T:Windows.Storage.StorageEventManager"/> object call an event-handling method when a <see cref="E:Windows.Storage.StorageEventManager.RemovableDeviceRemoved"/> event occurs, 
            you must associate the method with a <see cref="T:Windows.Storage.RemovableDeviceEventHandler"/> delegate, and add this delegate to this event. 
            </remarks>
        </member>
        <member name="T:Windows.Storage.RemovableDeviceEventArgs">
            <summary>
            Contains argument values for Removable Devices events.
            </summary>
        </member>
        <member name="P:Windows.Storage.RemovableDeviceEventArgs.Path">
            <summary>
            The path of the Removable Device.
            </summary>
        </member>
        <member name="P:Windows.Storage.RemovableDeviceEventArgs.Event">
            <summary>
            The <see cref="T:Windows.Storage.RemovableDeviceEventArgs.RemovableDeviceEvent"/> occurred.
            </summary>
        </member>
        <member name="T:Windows.Storage.RemovableDeviceEventArgs.RemovableDeviceEvent">
            <summary>
            Specifies the type of event occurred with the Removable Device specified.
            </summary>
            <remarks>
            This enum is specific to nanoFramework. There is no equivalent in the UWP API.
            </remarks>
        </member>
        <member name="F:Windows.Storage.RemovableDeviceEventArgs.RemovableDeviceEvent.Inserted">
            <summary>
            A Removable Device has been inserted.
            </summary>
        </member>
        <member name="F:Windows.Storage.RemovableDeviceEventArgs.RemovableDeviceEvent.Removed">
            <summary>
            A Removable Device has been removed.
            </summary>
        </member>
        <member name="T:Windows.Storage.StorageFile">
            <summary>
            Represents a file. Provides information about the file and its content, and ways to manipulate them.
            </summary>
        </member>
        <member name="P:Windows.Storage.StorageFile.Attributes">
            <summary>
            Gets the attributes of a file.
            </summary>
            <value>
            The file attributes.
            </value>
        </member>
        <member name="P:Windows.Storage.StorageFile.ContentType">
             <summary>
             Gets the MIME type of the contents of the file.
             </summary>
            <remarks>
             This property is not available in nanoFramework.
            </remarks>
        </member>
        <member name="P:Windows.Storage.StorageFile.DateCreated">
            <summary>
            Gets the date and time that the current folder was created.
            </summary>
            <remarks>
            This is the nanoFrameowrk equivalent of UWP DateCreated of type DateTimeOffset.
            </remarks>
        </member>
        <member name="P:Windows.Storage.StorageFile.DisplayName">
             <summary>
             Gets the user-friendly name of the current folder.
             </summary>
            <remarks>
             This property is not available in nanoFramework.
            </remarks>
        </member>
        <member name="P:Windows.Storage.StorageFile.DisplayType">
             <summary>
             Gets the user-friendly description of the type of the folder; for example, JPEG image.
             </summary>
            <remarks>
             This property is not available in nanoFramework.
            </remarks>
        </member>
        <member name="P:Windows.Storage.StorageFile.FileType">
            <summary>
            Gets the type (file name extension) of the file.
            </summary>
        </member>
        <member name="P:Windows.Storage.StorageFile.FolderRelativeId">
             <summary>
             Gets an identifier for the file. This ID is unique for the query result or <see cref="T:Windows.Storage.StorageFolder"/> that contains the file and can be used to distinguish between items that have the same name.
             </summary>
            <remarks>
             This property is not available in nanoFramework.
            </remarks>
        </member>
        <member name="P:Windows.Storage.StorageFile.IsAvailable">
             <summary>
             Indicates if the file is local, is cached locally, or can be downloaded.
             </summary>
             <value>
             True if the file is local, is cached locally, or can be downloaded. Otherwise, false.
             </value>
            <remarks>
             This property is always true in nanoFramework.
            </remarks>
        </member>
        <member name="P:Windows.Storage.StorageFile.Name">
            <summary>
            Gets the name of the file including the file name extension.
            </summary>
            <value>
            The name of the file including the file name extension.
            </value>
        </member>
        <member name="P:Windows.Storage.StorageFile.Path">
            <summary>
            Gets the full file-system path of the current file, if the file has a path.
            </summary>
        </member>
        <member name="M:Windows.Storage.StorageFile.Delete">
            <summary>
            Delete the current file.
            </summary>
            <remarks>
            <para>
            If the file doesn't exist this method will throw an exception.
            </para>
            <para>
            This method is exclusive of nanoFramework and it's not available in the UWP API.
            The equivalent method would be DeleteAsync().
            </para>
            </remarks>
        </member>
        <member name="M:Windows.Storage.StorageFile.GetFileFromPath(System.String)">
             <summary>
             Gets a StorageFile object to represent the file at the specified path.
             </summary>
             <param name="path">The path of the file to get a StorageFile to represent.</param>
             <returns>Returns the file as a StorageFile.</returns>
            <remarks>
            
             This method is exclusive of nanoFramework and it's not available in the UWP API.
             The equivalent method would be GetFileFromPathAsync(String).
            </remarks>
        </member>
        <member name="M:Windows.Storage.StorageFile.Rename(System.String)">
            <summary>
            Renames the current file.
            </summary>
            <param name="desiredName">The desired new name of the current file.</param>
            <remarks>
            <para>
            If the name you specify is invalid or already exists, this method throws an exception
            </para>
            <para>
            This method is exclusive of nanoFramework and it's not available in the UWP API.
            The equivalent method would be RenameAsync(String desiredName).
            </para>
            </remarks>
        </member>
        <member name="T:Windows.Storage.StorageFolder">
            <summary>
            Manages folders and their contents and provides information about them.
            </summary>
        </member>
        <member name="P:Windows.Storage.StorageFolder.Attributes">
            <summary>
            Gets the attributes of the current folder.
            </summary>
            <value>
            The attributes of the current folder.
            </value>
        </member>
        <member name="P:Windows.Storage.StorageFolder.DateCreated">
            <summary>
            Gets the date and time that the current folder was created.
            </summary>
            <remarks>
            This is the nanoFrameowrk equivalent of UWP DateCreated of type DateTimeOffset.
            </remarks>
        </member>
        <member name="P:Windows.Storage.StorageFolder.DisplayName">
             <summary>
             Gets the user-friendly name of the current folder.
             </summary>
            <remarks>
             This property is not available in nanoFramework.
            </remarks>
        </member>
        <member name="P:Windows.Storage.StorageFolder.DisplayType">
             <summary>
             Gets the user-friendly description of the type of the folder.
             </summary>
            <remarks>
             This property is not available in nanoFramework.
            </remarks>
        </member>
        <member name="P:Windows.Storage.StorageFolder.FolderRelativeId">
             <summary>
             Gets an identifier for the current folder. This ID is unique for the query result or <see cref="T:Windows.Storage.StorageFolder"/> that contains the current folder or file group, and can be used to distinguish between items that have the same name.
             </summary>
            <remarks>
             This property is not available in nanoFramework.
            </remarks>
        </member>
        <member name="P:Windows.Storage.StorageFolder.Name">
            <summary>
            Gets the name of the current folder.
            </summary>
            <value>
            The name of the current folder.
            </value>
        </member>
        <member name="P:Windows.Storage.StorageFolder.Path">
            <summary>
            Gets the full path of the current folder in the file system, if the path is available.
            </summary>
        </member>
        <member name="M:Windows.Storage.StorageFolder.CreateFile(System.String)">
             <summary>
             Creates a new file with the specified name in the current folder.
             </summary>
             <param name="desiredName">The name of the new file to create in the current folder.</param>
             <returns>When this method completes, it returns a <see cref="T:Windows.Storage.StorageFile"/> that represents the new file.</returns>
            <remarks>
             This method uses the FailIfExists value from the <see cref="T:Windows.Storage.CreationCollisionOption"/> enumeration by default. That is, this method raises an exception if a subfolder with the same name already exists in the current folder. If you want to handle a folder name collision in a different way, call the <see cref="M:Windows.Storage.StorageFolder.CreateFile(System.String,Windows.Storage.CreationCollisionOption)"/> method.
            
             This method is exclusive of nanoFramework and it's not available in the UWP API.
             The equivalent method would be CreateFileAsync(String).
            </remarks>
        </member>
        <member name="M:Windows.Storage.StorageFolder.CreateFile(System.String,Windows.Storage.CreationCollisionOption)">
             <summary>
             Creates a new file with the specified name in the current folder.
             </summary>
             <param name="desiredName">The name of the new file to create in the current folder.</param>
             <param name="options">One of the enumeration values that determines how to handle the collision if a file with the specified desiredName already exists in the current folder.</param>
             <returns>When this method completes, it returns a <see cref="T:Windows.Storage.StorageFile"/> that represents the new file.</returns>
            <remarks>
             This method is exclusive of nanoFramework and it's not available in the UWP API.
             The equivalent method would be CreateFileAsync(String, CreationCollisionOption).
            </remarks>
        </member>
        <member name="M:Windows.Storage.StorageFolder.CreateFolder(System.String)">
             <summary>
             Creates a new subfolder with the specified name in the current folder.
             </summary>
             <param name="desiredName">The name of the new subfolder to create in the current folder.</param>
             <returns>
             When this method completes, it returns a <see cref="T:Windows.Storage.StorageFolder"/> that represents the new subfolder.
             </returns>
            <remarks>
             This method uses the FailIfExists value from the <see cref="T:Windows.Storage.CreationCollisionOption"/> enumeration by default. That is, this method raises an exception if a subfolder with the same name already exists in the current folder. If you want to handle a folder name collision in a different way, call the <see cref="M:Windows.Storage.StorageFolder.CreateFolder(System.String,Windows.Storage.CreationCollisionOption)"/> method.
             
             This method is exclusive of nanoFramework and it's not available in the UWP API.
             The equivalent method would be CreateFolderAsync(String).
            </remarks>
        </member>
        <member name="M:Windows.Storage.StorageFolder.CreateFolder(System.String,Windows.Storage.CreationCollisionOption)">
             <summary>
             Creates a new subfolder with the specified name in the current folder. This method also specifies what to do if a subfolder with the same name already exists in the current folder.
             </summary>
             <param name="desiredName">The name of the new subfolder to create in the current folder.</param>
             <param name="options">One of the enumeration values that determines how to handle the collision if a subfolder with the specified desiredName already exists in the current folder.</param>
             <returns>
             When this method completes, it returns a <see cref="T:Windows.Storage.StorageFolder"/> that represents the new subfolder.
             </returns>
            <remarks>
             <para>
             This method is exclusive of nanoFramework and it's not available in the UWP API.
             The equivalent method would be CreateFolderAsync(String, CreationCollisionOption).
             </para>
            </remarks>
        </member>
        <member name="M:Windows.Storage.StorageFolder.Delete">
            <summary>
            Delete the current folder.
            </summary>
            <remarks>
            <para>
            If the folder doesn't exist then this method will throw an exception.
            </para>
            <para>This method is exclusive of nanoFramework and it's not available in the UWP API.
            The equivalent method would be DeleteAsync().
            </para>
            </remarks>
        </member>
        <member name="M:Windows.Storage.StorageFolder.GetFiles">
             <summary>
             Gets the files in the current folder.
             </summary>
             <returns>
             When this method completes successfully, it returns a list of the files in the current folder. 
             The list is of type <see cref="T:Windows.Storage.StorageFile"/>. Each file in the list is represented by a <see cref="T:Windows.Storage.StorageFile"/> object.
             </returns>
            <remarks>
             This method is exclusive of nanoFramework and it's not available in the UWP API.
             The equivalent method would be GetFilesAsync().
            </remarks> 
        </member>
        <member name="M:Windows.Storage.StorageFolder.GetFiles(Windows.Storage.Search.CommonFileQuery)">
             <summary>
             Gets the files in the current folder. Also gets the files from the subfolders of the current folder when the value of the query argument is something other than <see cref="F:Windows.Storage.Search.CommonFileQuery.DefaultQuery"/>.
             Files are sorted based on the specified value from the <see cref="T:Windows.Storage.Search.CommonFileQuery"/> enumeration.
             </summary>
             <param name="query">One of the enumeration values that specifies how to sort the files and determines whether the query is shallow or deep.</param>
             <returns>
             When this method completes successfully, it returns a flat list of files, sorted as specified by query. 
             The list is of type <see cref="T:Windows.Storage.StorageFile"/>. Each file in the list is represented by a <see cref="T:Windows.Storage.StorageFile"/> object.
             </returns>
            <remarks>
             This method is exclusive of nanoFramework and it's not available in the UWP API.
             The equivalent method would be GetFilesAsync(CommonFileQuery).
            </remarks> 
        </member>
        <member name="M:Windows.Storage.StorageFolder.GetFiles(Windows.Storage.Search.CommonFileQuery,System.UInt32,System.UInt32)">
             <summary>
             Gets an index-based range of files from the list of all files in the current folder. Also gets the files from the subfolders of the current folder when the value of the query argument is something other than <see cref="F:Windows.Storage.Search.CommonFileQuery.DefaultQuery"/>. Files are sorted based on the specified value from the <see cref="T:Windows.Storage.Search.CommonFileQuery"/> enumeration.
             </summary>
             <param name="query">One of the enumeration values that specifies how to sort the files and determines whether the query is shallow or deep.</param>
             <param name="startIndex">The zero-based index of the first file in the range to retrieve.</param>
             <param name="maxItemsToRetrieve">The maximum number of files to retrieve.</param>
             <returns>
             When this method completes successfully, it returns a flat list of files, sorted as specified by query. 
             The list is of type <see cref="T:Windows.Storage.StorageFile"/>. Each file in the list is represented by a <see cref="T:Windows.Storage.StorageFile"/> object.
             </returns>
            <remarks>
             This method is exclusive of nanoFramework and it's not available in the UWP API.
             The equivalent method would be GetFilesAsync(CommonFileQuery, UInt32, UInt32).
            </remarks> 
        </member>
        <member name="M:Windows.Storage.StorageFolder.GetFolder(System.String)">
            <summary>
            Gets the subfolder with the specified name from the current folder.
            </summary>
            <param name="name">The name (or path relative to the current folder) of the subfolder to get.</param>
            <returns>
            When this method completes successfully, it returns a StorageFolder that represents the specified subfolder.
            </returns>
            <remarks>
            <para>
            If the folder doesn't exist it will throw an exception.
            </para>
            <para>
            This method is exclusive of nanoFramework and it's not available in the UWP API.
            The equivalent method would be GetFolderAsync(String name).
            </para>
            </remarks>
        </member>
        <member name="M:Windows.Storage.StorageFolder.GetFolders">
             <summary>
             Gets the subfolders in the current folder.
             </summary>
             <returns> 
             When this method completes successfully, it returns a list of the subfolders in the current folder. The list is of type StorageFolder.
             Each folder in the list is represented by a StorageFolder object.
            </returns>
            <remarks>
             This method is exclusive of nanoFramework and it's not available in the UWP API.
             The equivalent method would be GetFoldersAsync().
            </remarks>
        </member>
        <member name="M:Windows.Storage.StorageFolder.IsCommonFileQuerySupported(Windows.Storage.Search.CommonFileQuery)">
            <summary>
            Indicates whether the current folder supports the specified <see cref="T:Windows.Storage.Search.CommonFileQuery"/>.
            </summary>
            <param name="query">The value to test.</param>
            <returns>
            True if the folder supports the specified <see cref="T:Windows.Storage.Search.CommonFileQuery"/> otherwise, false.
            </returns>
        </member>
        <member name="M:Windows.Storage.StorageFolder.Rename(System.String)">
            <summary>
            Renames the current folder.
            </summary>
            <param name="desiredName">The desired, new name for the current folder.</param>
            <remarks>
            <para>If the name you specify is invalid or a folder with the same name already exists, 
            this method throws an exception. If the target device doesn't support folders then this will also
            throw an exception.</para>
            <para>This method is exclusive of nanoFramework and it's not available in the UWP API.
            The equivalent method would be RenameAsync(String desiredName).</para>
            </remarks>
        </member>
        <member name="T:Windows.Storage.StorageProvider">
            <summary>
            Contains info about the service that stores files and folders. Files and folders may be stored either by the local file system or by a remote service like Microsoft OneDrive.
            </summary>
        </member>
        <member name="P:Windows.Storage.StorageProvider.DisplayName">
            <summary>
            Gets a user-friendly name for the current provider of files and folders.
            </summary>
            <value>
            The user-friendly name for the provider. This name is localized to the current system locale.
            </value> 
        </member>
        <member name="P:Windows.Storage.StorageProvider.Id">
            <summary>
            Gets an identifier for the current provider of files and folders.
            </summary>
            <value>
            The identifier for the provider.
            </value>
            <remarks>
            The ID can be Local, Network, or OneDrive depending on your provider.
            </remarks>
        </member>
    </members>
</doc>
