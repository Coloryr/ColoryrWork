<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Net</name>
    </assembly>
    <members>
        <member name="T:System.Net.Dns">
            <summary>
            Provides simple domain name resolution functionality.
            </summary>
        </member>
        <member name="M:System.Net.Dns.GetHostEntry(System.String)">
            <summary>
            Resolves a host name or IP address to an <see cref="T:System.Net.IPHostEntry"/> instance.
            </summary>
            <param name="hostNameOrAddress">The host name or IP address to resolve.</param>
            <returns>An <see cref="T:System.Net.IPHostEntry"/> instance that contains address information about the host specified in 
            hostNameOrAddress.
            </returns>
            <remarks>
            <para>The GetHostEntry method queries a DNS server for the IP address that is associated with a host name or IP address.</para>
            <para>When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host.</para>
            </remarks>
        </member>
        <member name="T:System.Net.EndPoint">
            <summary>
             Identifies a network address. This is an abstract class.
            </summary>
            <remarks>
            The EndPoint class provides an abstract base class that represents a network resource or service. Descendant classes 
            combine network connection information to form a connection point to a service.
            </remarks>
        </member>
        <member name="M:System.Net.EndPoint.Serialize">
            <summary>
            Serializes endpoint information into a <see cref="T:System.Net.SocketAddress"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.Net.SocketAddress"/> instance that contains the endpoint information.
            </returns>
        </member>
        <member name="M:System.Net.EndPoint.Create(System.Net.SocketAddress)">
            <summary>
            Creates an <see cref="T:System.Net.EndPoint"/> instance from a <see cref="T:System.Net.SocketAddress"/> instance.
            </summary>
            <param name="socketAddress">The socket address that serves as the endpoint for a connection.</param>
            <returns>
            A new <see cref="T:System.Net.EndPoint"/> instance that is initialized from the specified <see cref="T:System.Net.SocketAddress"/> instance.
            </returns>
        </member>
        <member name="T:System.Net.IPAddress">
            <summary>
            Provides an internet protocol (IP) address.
            </summary>
        </member>
        <member name="F:System.Net.IPAddress.Any">
            <summary>
            Provides an IP address that indicates that the server must listen for client activity on all network interfaces. 
            This field is read-only.
            </summary>
        </member>
        <member name="F:System.Net.IPAddress.Loopback">
            <summary>
            Provides the IP loopback address. This field is read-only.
            </summary>
        </member>
        <member name="P:System.Net.IPAddress.AddressFamily">
            <summary>
            Gets the address family of the IP address.
            </summary>
            <value>Returns <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"/> for IPv4 or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"/> for IPv6.</value>
        </member>
        <member name="M:System.Net.IPAddress.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.IPAddress"/> class with the address specified as an Int64.
            </summary>
            <param name="newAddress"></param>
        </member>
        <member name="M:System.Net.IPAddress.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.IPAddress"/> class with the address specified as a Byte array.
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:System.Net.IPAddress.Equals(System.Object)">
            <summary>
            Compares two IP addresses.
            </summary>
            <param name="obj">An <see cref="T:System.Net.IPAddress"/> instance to compare to the current instance.</param>
            <returns></returns>
        </member>
        <member name="M:System.Net.IPAddress.GetAddressBytes">
            <summary>
            Provides a copy of the <see cref="T:System.Net.IPAddress"/> as an array of bytes.
            </summary>
            <returns>A Byte array.</returns>
        </member>
        <member name="M:System.Net.IPAddress.Parse(System.String)">
            <summary>
            Converts an IP address string to an <see cref="T:System.Net.IPAddress"/> instance.
            </summary>
            <param name="ipString">A string that contains an IP address in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.</param>
            <returns>An <see cref="T:System.Net.IPAddress"/> instance.
            </returns>
        </member>
        <member name="M:System.Net.IPAddress.ToString">
            <summary>
            Converts an Internet address to its standard notation.
            </summary>
            <returns>A string that contains the IP address in either IPv4 dotted-quad or 
            in IPv6 colon-hexadecimal notation.
            </returns>
            <remarks>
            The ToString method converts the IP address that is stored in the Address property to either IPv4 dotted-quad or 
            IPv6 colon-hexadecimal notation.
            </remarks>
        </member>
        <member name="M:System.Net.IPAddress.GetDefaultLocalAddress">
            <summary>
            Retrieves an IP address that is the local default address.
            </summary>
            <returns>The default IP address.</returns>
        </member>
        <member name="T:System.Net.IPEndPoint">
            <summary>
            Represents a network endpoint as an IP address and a port number.
            </summary>
        </member>
        <member name="F:System.Net.IPEndPoint.MinPort">
            <summary>
            Specifies the minimum value that can be assigned to the Port property. This field is read-only.
            </summary>
        </member>
        <member name="F:System.Net.IPEndPoint.MaxPort">
            <summary>
            Specifies the maximum value that can be assigned to the Port property. The MaxPort value is set to 0x0000FFFF. This field is read-only.
            </summary>
        </member>
        <member name="M:System.Net.IPEndPoint.#ctor(System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.IPEndPoint"/> class with the specified address and port number.
            </summary>
            <param name="address">The IP address of the Internet host.</param>
            <param name="port">The port number associated with the address, or 0 to specify any available port. port is in host order.</param>
        </member>
        <member name="M:System.Net.IPEndPoint.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.IPEndPoint"/> class with the specified address and port number.
            </summary>
            <param name="address"></param>
            <param name="port"></param>
        </member>
        <member name="P:System.Net.IPEndPoint.Address">
            <summary>
            Gets or sets the IP address of the endpoint.
            </summary>
            <value>An IPAddress instance containing the IP address of the endpoint.</value>
        </member>
        <member name="P:System.Net.IPEndPoint.AddressFamily">
            <summary>
            Gets the Internet Protocol (IP) address family.
            </summary>
            <value>Returns <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"/>.</value>
        </member>
        <member name="P:System.Net.IPEndPoint.Port">
            <summary>
            Gets or sets the port number of the endpoint.
            </summary>
            <value>An integer value in the range <see cref="F:System.Net.IPEndPoint.MinPort"/> to <see cref="F:System.Net.IPEndPoint.MaxPort"/> indicating the port number of the endpoint.</value>
        </member>
        <member name="M:System.Net.IPEndPoint.Serialize">
            <summary>
            Serializes endpoint information into a <see cref="T:System.Net.SocketAddress"/> instance.
            </summary>
            <returns>A <see cref="T:System.Net.SocketAddress"/> instance containing the socket address for the endpoint.</returns>
        </member>
        <member name="M:System.Net.IPEndPoint.Create(System.Net.SocketAddress)">
            <summary>
            Creates an endpoint from a socket address.
            </summary>
            <param name="socketAddress">The <see cref="T:System.Net.SocketAddress"/> to use for the endpoint.</param>
            <returns>An <see cref="T:System.Net.EndPoint"/> instance using the specified socket address.</returns>
        </member>
        <member name="M:System.Net.IPEndPoint.ToString">
            <summary>
            Returns the IP address and port number of the specified endpoint.
            </summary>
            <returns>A string containing the IP address and the port number of the specified endpoint (for example, 192.168.1.2:80).</returns>
        </member>
        <member name="M:System.Net.IPEndPoint.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current IPEndPoint instance.
            </summary>
            <param name="obj">The specified Object to compare with the current <see cref="T:System.Net.IPEndPoint"/> instance.</param>
            <returns>true if the objects are equal.</returns>
        </member>
        <member name="T:System.Net.IPHostEntry">
            <summary>
            Provides a container class for Internet host address information.
            </summary>
            <remarks>
            <para>The IPHostEntry class associates a Domain Name System (DNS) host name with an array of aliases and an array 
            of matching IP addresses.</para>
            <para>The IPHostEntry class is used as a helper class with the <see cref="T:System.Net.Dns"/> class.</para>
            </remarks>
        </member>
        <member name="P:System.Net.IPHostEntry.HostName">
            <summary>
            Gets or sets the DNS name of the host.
            </summary>
            <value>
            A string that contains the primary host name for the server.
            </value>
            <remarks>
            The HostName property contains the primary host name for a server. If the DNS entry for the server defines additional aliases, 
            they will be available in the Aliases property.
            </remarks>
        </member>
        <member name="P:System.Net.IPHostEntry.AddressList">
            <summary>
            Gets or sets a list of IP addresses that are associated with a host.
            </summary>
            <value>
            An array of type <see cref="T:System.Net.IPAddress"/> that contains IP addresses that resolve to the host names that are contained in the Aliases property.
            </value>
        </member>
        <member name="T:System.Net.NetworkInformation.AuthenticationType">
            <summary>
            Specifies the authentication used in a wireless network.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.AuthenticationType.None">
            <summary>
            No protocol.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.AuthenticationType.EAP">
            <summary>
            Extensible Authentication Protocol.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.AuthenticationType.PEAP">
            <summary>
            Protected Extensible Authentication Protocol.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.AuthenticationType.WCN">
            <summary>
            Microsoft Windows Connect Now protocol.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.AuthenticationType.Open">
            <summary>
            Open System authentication, for use with WEP encryption type.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.AuthenticationType.Shared">
            <summary>
            Shared Key authentication, for use with WEP encryption type.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.AuthenticationType.WEP">
            <summary>
            Wired Equivalent Privacy protocol.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.AuthenticationType.WPA">
            <summary>
            Wi-Fi Protected Access protocol.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.AuthenticationType.WPA2">
            <summary>
            Wi-Fi Protected Access 2 protocol.
            </summary>
        </member>
        <member name="T:System.Net.NetworkInformation.RadioType">
            <summary>
            Specifies the type of radio that the wireless network uses.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.RadioType.NotSpecified">
            <summary>
            Not specified.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.RadioType._802_11a">
            <summary>
            802.11a-compatible radio.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.RadioType._802_11b">
            <summary>
            802.11b-compatible radio.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.RadioType._802_11g">
            <summary>
            802.11g-compatible radio.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.RadioType._802_11n">
            <summary>
            802.11n-compatible radio.
            </summary>
        </member>
        <member name="T:System.Net.NetworkInformation.EncryptionType">
            <summary>
            Defines the available types of encryption for wireless networks.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.EncryptionType.None">
            <summary>
            No encryption.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.EncryptionType.WEP">
            <summary>
            Wired Equivalent Privacy encryption.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.EncryptionType.WPA">
            <summary>
            Wireless Protected Access encryption.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.EncryptionType.WPA2">
            <summary>
            Wireless Protected Access 2 encryption.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.EncryptionType.WPA_PSK">
            <summary>
            Wireless Protected Access Pre-Shared Key encryption.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.EncryptionType.WPA2_PSK">
            <summary>
            Wireless Protected Access 2 Pre-Shared Key encryption.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.EncryptionType.Certificate">
            <summary>
            Certificate encryption.
            </summary>
        </member>
        <member name="T:System.Net.NetworkInformation.NetworkInformationOptions">
            <summary>
            Options for <see cref="N:System.Net.NetworkInformation"/>.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.NetworkInformationOptions.None">
            <summary>
            No encryption.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.NetworkInformationOptions.WEP">
            <summary>
            Wired Equivalent Privacy encryption.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.NetworkInformationOptions.WPA">
            <summary>
            Wireless Protected Access encryption.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.NetworkInformationOptions.WPA2">
            <summary>
            Wireless Protected Access 2 encryption.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.NetworkInformationOptions.WPA_PSK">
            <summary>
            Wireless Protected Access Pre-Shared Key encryption.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.NetworkInformationOptions.WPA2_PSK">
            <summary>
            Wireless Protected Access 2 Pre-Shared Key encryption.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.NetworkInformationOptions.Certificate">
            <summary>
            Certificate encryption.
            </summary>
        </member>
        <member name="T:System.Net.NetworkInformation.AddressMode">
            <summary>
             Start up network IP address assigning modes
            </summary>
            <remarks>
            This Enum is exclusive of nanoFramework and it does not exist on the UWP API.
            </remarks>
        </member>
        <member name="F:System.Net.NetworkInformation.AddressMode.Invalid">
            <summary>
            Invalid state.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.AddressMode.DHCP">
            <summary>
            IP address from DHCP.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.AddressMode.Static">
            <summary>
            Static IP address.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.AddressMode.AutoIP">
            <summary>
            Auto IP.
            </summary>
        </member>
        <member name="T:System.Net.NetworkInformation.NetworkAvailabilityEventArgs">
            <summary>
            Contains argument values for network availability events.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.NetworkAvailabilityEventArgs.IsAvailable">
            <summary>
            Indicates whether the network is currently available.
            </summary>
        </member>
        <member name="T:System.Net.NetworkInformation.NetworkAPStationEventArgs">
            <summary>
            Contains argument values for network availability events.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.NetworkAPStationEventArgs.IsConnected">
            <summary>
            Indicates whether the client has connected or disconnected.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.NetworkAPStationEventArgs.StationIndex">
            <summary>
            Returns the Index of the connected Station.
            </summary>
        </member>
        <member name="T:System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler">
            <summary>
            Provides an event handler that is called when the network address changes.
            </summary>
            <param name="sender">Specifies the object that sent the network address changed event. </param>
            <param name="e">Contains the network address changed event arguments. </param>
        </member>
        <member name="T:System.Net.NetworkInformation.NetworkAddressChangedEventHandler">
            <summary>
            Indicates a change in the availability of the network.
            </summary>
            <param name="sender">Specifies the object that sent the network availability changed event. </param>
            <param name="e">Contains the network availability changed event arguments. </param>
        </member>
        <member name="T:System.Net.NetworkInformation.NetworkAPStationChangedEventHandler">
            <summary>
            Indicates a change in the connected clients to Access Point.
            </summary>
            <param name="NetworkIndex">Specifies the index of network interface that sent the event. </param>
            <param name="e">Contains the network AP client changed event arguments. </param>
        </member>
        <member name="T:System.Net.NetworkInformation.NetworkChange">
            <summary>
            Contains information about changes in the availability and address of the network.
            </summary>
        </member>
        <member name="E:System.Net.NetworkInformation.NetworkChange.NetworkAddressChanged">
            <summary>
            Event occurs when the IP address of a network interface changes.
            </summary>
            <remarks>
            The NetworkChange class raises NetworkAddressChanged events when the address of a network interface, 
            also called a network card or adapter, changes.
            
            To have a NetworkChange object call an event-handling method when a NetworkAddressChanged event occurs, 
            you must associate the method with a NetworkAddressChangedEventHandler delegate, and add this delegate to this event. 
            </remarks>
        </member>
        <member name="E:System.Net.NetworkInformation.NetworkChange.NetworkAvailabilityChanged">
            <summary>
            Event occurs when the availability of the network changes.
            </summary>
            <remarks>
            The NetworkChange class raises NetworkAvailabilityChanged events when the availability of the network changes. 
            The network is available when at least one network interface is marked "up" and is not a tunnel or loopback interface.
            
            To have a NetworkChange object call an event-handling method when a NetworkAvailabilityChanged event occurs, 
            you must associate the method with a NetworkAvailabilityChangedEventHandler delegate, and add this delegate to this event. 
            </remarks>
        </member>
        <member name="E:System.Net.NetworkInformation.NetworkChange.NetworkAPStationChanged">
            <summary>
            Event occurs when a station connects or disconnects from Soft Access Point.
            </summary>
            <remarks>
            The NetworkChange class raises the NetworkAPStationChanged events when a client 
            connects or disconnects from the Soft AP. 
            
            To have a NetworkChange object call an event-handling method when a NetworkAPStationChanged event occurs, 
            you must associate the method with a NetworkAPStationChangedEventHandler delegate, and add this delegate to this event. 
            </remarks>
        </member>
        <member name="T:System.Net.NetworkInformation.NetworkInterface">
            <summary>
            Provides information about network interfaces and enables applications to control them.
            </summary>
            <remarks>
            This class is exclusive of nanoFramework and it does not exist on the UWP API.
            </remarks>
        </member>
        <member name="M:System.Net.NetworkInformation.NetworkInterface.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.NetworkInterface"/> class.
            </summary>
            <param name="interfaceIndex"></param>
        </member>
        <member name="M:System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces">
            <summary>
            Retrieves an array of all of the device's network interfaces.
            </summary>
            <returns>An array containing all of the device's network interfaces. </returns>
        </member>
        <member name="M:System.Net.NetworkInformation.NetworkInterface.EnableStaticIPv4(System.String,System.String,System.String)">
            <summary>
            Enables an application to set and use a static IPv4 address.
            </summary>
            <param name="ipv4Address">Holds the IPv4 address to use. </param>
            <param name="ipv4SubnetMask">Contains the IPv4 address's subnet mask.</param>
            <param name="ipv4GatewayAddress">Specifies the IPv4 address of the gateway. </param>
        </member>
        <member name="M:System.Net.NetworkInformation.NetworkInterface.EnableStaticIPv6(System.String,System.String,System.String)">
            <summary>
            Enables an application to set and use a static IPv6 address.
            </summary>
            <param name="ipv6Address">Holds the IPv6 address to use. </param>
            <param name="ipv6SubnetMask">Contains the IPv6 address's subnet mask.</param>
            <param name="ipv6GatewayAddress">Specifies the IPv6 address of the gateway. </param>
        </member>
        <member name="M:System.Net.NetworkInformation.NetworkInterface.EnableStaticIP(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Enables an application to set and use a static IPv4 and IPv6 address.
            </summary>
            <param name="ipv4Address">Holds the IPv4 address to use. </param>
            <param name="ipv4subnetMask">Contains the IPv4 address's subnet mask.</param>
            <param name="ipv4gatewayAddress">Specifies the IPv4 address of the gateway. </param>
            <param name="ipv6Address">Holds the IPv6 address to use. </param>
            <param name="ipv6SubnetMask">Contains the IPv6 address's subnet mask.</param>
            <param name="ipv6GatewayAddress">Specifies the IPv6 address of the gateway. </param>
        </member>
        <member name="M:System.Net.NetworkInformation.NetworkInterface.EnableDhcp">
            <summary>
            Enables the Dynamic Host Configuration Protocol (DHCP) for service with this network interface.
            </summary>
        </member>
        <member name="M:System.Net.NetworkInformation.NetworkInterface.EnableStaticIPv4Dns(System.String[])">
            <summary>
            Enables a network interface to use a specific DNS server IPv4 address.
            </summary>
            <param name="dnsAddresses">Holds the DNS server address. </param>
        </member>
        <member name="M:System.Net.NetworkInformation.NetworkInterface.EnableStaticIPv6Dns(System.String[])">
            <summary>
            Enables a network interface to use a specific DNS server IPv6 address.
            </summary>
            <param name="dnsAddresses">Holds the DNS server address. </param>
        </member>
        <member name="M:System.Net.NetworkInformation.NetworkInterface.EnableAutomaticDns">
            <summary>
            Enables a network interface to obtain a DNS server address automatically.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.NetworkInterface.IsAutomaticDnsEnabled">
            <summary>
            Retrieves a value indicating whether a network interface can obtain a DNS server address automatically.
            true if dynamic DNS is enabled, or false if not. 
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.NetworkInterface.IPv4Address">
            <summary>
            Holds the IP v4 address of the network interface.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.NetworkInterface.IPv4GatewayAddress">
            <summary>
            Contains the gateway IPv4 address.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.NetworkInterface.IPv4SubnetMask">
            <summary>
            Retrieves the network interface's IPv4 subnet mask.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.NetworkInterface.IsDhcpEnabled">
            <summary>
            Gets a value specifying whether DHCP is enabled for this network interfaces.
            true if DHCP is enabled, or false if not. 
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.NetworkInterface.IPv4DnsAddresses">
            <summary>
            Holds the IPv4 DNS server address.
            </summary>
        </member>
        <member name="M:System.Net.NetworkInformation.NetworkInterface.ReleaseDhcpLease">
            <summary>
            Releases the DHCP lease, which releases the IP address bound to a DHCP-enabled network interface.
            </summary>
        </member>
        <member name="M:System.Net.NetworkInformation.NetworkInterface.RenewDhcpLease">
            <summary>
            Renews a DHCP lease, which renews the IP address on a DHCP-enabled network interface.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.NetworkInterface.PhysicalAddress">
            <summary>
            Gets or sets the Media Access Control (MAC) address for a network interface.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.NetworkInterface.NetworkInterfaceType">
            <summary>
            Retrieves a value specifying the type of network interface being used by the device.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.NetworkInterface.SpecificConfigId">
            <summary>
            The ID of the associated configuration, if any. To be used as the foreign key of that configuration.
            </summary>
            <remarks>
            If there is no configuration associated it reads as <see cref="F:System.UInt32.MaxValue"/>.
            </remarks>
        </member>
        <member name="T:System.Net.NetworkInformation.NetworkInterfaceType">
            <summary>
            Specifies the type of network interface used by the device.
            </summary>
            <remarks>
            This Enum is exclusive of nanoFramework and it does not exist on the UWP API.
            </remarks>
        </member>
        <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Unknown">
            <summary>
            The network interface type is unknown or not specified.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Ethernet">
            <summary>
            The network interface uses an Ethernet connection. Ethernet is defined in IEEE standard 802.3.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Wireless80211">
            <summary>
            The network interface uses a wireless LAN connection (IEEE 802.11 standard).
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.WirelessAP">
            <summary>
            The network interface uses a wireless Soft AP connection (IEEE 802.11 standard).
            </summary>
        </member>
        <member name="T:System.Net.NetworkInformation.Wireless80211Configuration">
            <summary>
            Configuration of wireless network based on the 802.11 standard.
            </summary>
            <remarks>
            This class is exclusive of nanoFramework and does not exist on the UWP API.
            </remarks>
        </member>
        <member name="F:System.Net.NetworkInformation.Wireless80211Configuration.MaxSsidLength">
            <summary>
            Contains the SSID length. The value is set to 32.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.Wireless80211Configuration.MaxPasswordLength">
            <summary>
            Contains the maximum password length. The value is set to 64.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.Wireless80211Configuration._configurationIndex">
            <summary>
            This is the configuration index as provided by the device storage manager.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.Wireless80211Configuration.Authentication">
            <summary>
            Specifies the type of authentication used on the wireless network.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.Wireless80211Configuration.Encryption">
            <summary>
            Specifies the type of encryption used on the wireless network.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.Wireless80211Configuration.Radio">
            <summary>
            Specifies the type of radio used by the wireless network adapter.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.Wireless80211Configuration.Options">
            <summary>
            Contains flags for the Wireless connection 
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.Wireless80211Configuration.Password">
            <summary>
            Contains the network passphrase.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.Wireless80211Configuration.Ssid">
            <summary>
            Contains the network's SSID.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.Wireless80211Configuration.Id">
            <summary>
            Contains the ID of the wireless configuration.
            </summary>
        </member>
        <member name="M:System.Net.NetworkInformation.Wireless80211Configuration.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.Wireless80211Configuration"/> class.
            </summary>
            <param name="id">The ID of the wireless configuration.</param>
        </member>
        <member name="M:System.Net.NetworkInformation.Wireless80211Configuration.SaveConfiguration">
            <summary>
            Saves the wireless 802.11 configuration information.
            </summary>
        </member>
        <member name="M:System.Net.NetworkInformation.Wireless80211Configuration.GetAllWireless80211Configurations">
            <summary>
            Retrieves an array of all of the wireless 802.11 network configurations.
            </summary>
            <returns>An array containing all of the wireless 802.11 network configuration stored in the device. </returns>
        </member>
        <member name="T:System.Net.NetworkInformation.Wireless80211Configuration.ConfigurationOptions">
            <summary>
            Configuration flags used for Wireless configuration.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.Wireless80211Configuration.ConfigurationOptions.None">
            <summary>
            No option set.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.Wireless80211Configuration.ConfigurationOptions.Disable">
            <summary>
            Disables the Wireless station.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.Wireless80211Configuration.ConfigurationOptions.Enable">
            <summary>
            Enables the Wireless station.
            If not set the wireless station is disabled.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.Wireless80211Configuration.ConfigurationOptions.AutoConnect">
            <summary>
            Will auto connect when AP is available or after being disconnected.
            This option forces enabling the Wireless station.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.Wireless80211Configuration.ConfigurationOptions.SmartConfig">
            <summary>
            Enables SmartConfig (if available) for this Wireless station.
            This option forces enabling the Wireless station.
            </summary>
        </member>
        <member name="T:System.Net.NetworkInformation.PhyProtocols">
            <summary>
            Enum of Phy protocols used for connection.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.PhyProtocols.PHY802_11b">
            <summary>
            IEEE 802.11b  max 11 Mbit/s
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.PhyProtocols.PHY802_11g">
            <summary>
            IEEE 802.11g  max 54 Mbit/s
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.PhyProtocols.PHY802_11n">
            <summary>
            IEEE 802.11n  max 288.8 Mbit/s for 20mhz channel or 600 for 40Mhz
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.PhyProtocols.PHY802_11lr">
            <summary>
            Low rate enabled.
            </summary>
        </member>
        <member name="T:System.Net.NetworkInformation.WirelessAPStation">
            <summary>
            Class that encapsulates the details of a connected client.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.WirelessAPStation.MacAddres">
            <summary>
            Returns the MAc address of the connected Client.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.WirelessAPStation.Rssi">
            <summary>
            Returns the Received signal strength indication(RSSI) of connected Client.
            RSSI is a value from 0 to 127 where the higher the number the stronger the signal.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.WirelessAPStation.PhyModes">
            <summary>
            Returns the PHY protocol used for connection.
            </summary>
        </member>
        <member name="T:System.Net.NetworkInformation.WirelessAPConfiguration">
            <summary>
            Configuration of wireless network SOft AP based on the 802.11 standard.
            </summary>
            <remarks>
            This class is exclusive of nanoFramework and does not exist on the UWP API.
            </remarks>
        </member>
        <member name="F:System.Net.NetworkInformation.WirelessAPConfiguration.MaxApSsidLength">
            <summary>
            Contains the SSID length. The value is set to 32.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.WirelessAPConfiguration.MaxApPasswordLength">
            <summary>
            Contains the maximum password length. The value is set to 64.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.WirelessAPConfiguration.MinApPasswordLength">
            <summary>
            Minimum password length
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.WirelessAPConfiguration._apConfigurationIndex">
            <summary>
            This is the configuration index as provided by the device storage manager.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.WirelessAPConfiguration.Authentication">
            <summary>
            Specifies the type of authentication used for the wireless AP.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.WirelessAPConfiguration.Encryption">
            <summary>
            Specifies the type of encryption used for the wireless AP.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.WirelessAPConfiguration.Radio">
            <summary>
            Specifies the type of radio used by the wireless network adapter.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.WirelessAPConfiguration.Password">
            <summary>
            Contains the network passphrase used for clients to connect to Soft AP
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.WirelessAPConfiguration.Ssid">
            <summary>
            Contains the Soft AP SSID.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.WirelessAPConfiguration.Options">
            <summary>
            Contains flags for the Soft AP 
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.WirelessAPConfiguration.Channel">
            <summary>
            Channel to use for AP.
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.WirelessAPConfiguration.MaxConnections">
            <summary>
            Maximum number of client connections
            </summary>
        </member>
        <member name="P:System.Net.NetworkInformation.WirelessAPConfiguration.Id">
            <summary>
            Contains the ID of the wireless AP configuration.
            </summary>
        </member>
        <member name="M:System.Net.NetworkInformation.WirelessAPConfiguration.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.WirelessAPConfiguration"/> class.
            </summary>
            <param name="id">The ID of the wireless configuration.</param>
        </member>
        <member name="M:System.Net.NetworkInformation.WirelessAPConfiguration.SaveConfiguration">
            <summary>
            Validate and save the wireless Soft AP configuration information.
            </summary>
            <remarks>
            Checks the length of SSID is 32 or less.
            Password length is between 8 and 64 if not an open Authentication.
            </remarks>
        </member>
        <member name="M:System.Net.NetworkInformation.WirelessAPConfiguration.GetAllWirelessAPConfigurations">
            <summary>
            Retrieves an array of all of the wireless Soft AP network configurations.
            </summary>
            <returns>An array containing all of the wireless 802.11 AP network configuration stored in the device. </returns>
        </member>
        <member name="M:System.Net.NetworkInformation.WirelessAPConfiguration.GetConnectedStations">
            <summary>
            Returns an array of information about the connected stations.
            </summary>
            <returns>A <see cref="T:System.Net.NetworkInformation.WirelessAPStation"/></returns>
        </member>
        <member name="M:System.Net.NetworkInformation.WirelessAPConfiguration.GetConnectedStations(System.Int32)">
            <summary>
            Returns information about the a connected station.
            </summary>
            <param name="stationIndex">The index of station to get information about.</param>
            <returns>An <see cref="T:System.Net.NetworkInformation.WirelessAPStation"/>.</returns>
        </member>
        <member name="M:System.Net.NetworkInformation.WirelessAPConfiguration.DeAuthStation(System.Int32)">
            <summary>
            DeAuthorise a connected station
            </summary>
            <param name="stationIndex">The index of station to De-Auth or 0 to De-Auth all stations.</param>
        </member>
        <member name="T:System.Net.NetworkInformation.WirelessAPConfiguration.ConfigurationOptions">
            <summary>
            Configuration flags used for Wireless Soft AP configuration.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.WirelessAPConfiguration.ConfigurationOptions.None">
            <summary>
            No option set.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.WirelessAPConfiguration.ConfigurationOptions.Disable">
            <summary>
            Disables the Wireless Soft AP.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.WirelessAPConfiguration.ConfigurationOptions.Enable">
            <summary>
            Enables the Wireless Soft AP.
            If not set the Wireless Soft AP is disabled.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.WirelessAPConfiguration.ConfigurationOptions.AutoStart">
            <summary>
            Will automatically start the Soft AP when CLR starts.
            This option forces enabling the Wireless Soft AP.
            </summary>
        </member>
        <member name="F:System.Net.NetworkInformation.WirelessAPConfiguration.ConfigurationOptions.HiddenSSID">
            <summary>
            The SSID for the Soft AP will be hidden.
            </summary>
        </member>
        <member name="T:System.Net.Security.CertificateManager">
            <summary>
            Provides an interface to the device certificate store to manage <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/>.
            </summary>
        </member>
        <member name="M:System.Net.Security.CertificateManager.AddCaCertificateBundle(System.Security.Cryptography.X509Certificates.X509Certificate[])">
            <summary>
            Adds a Certificate Authority Root bundle <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> to the store.
            If there is already a CA Root bundle it will be replaced with this one.
            </summary>
            <param name="ca">The Certificate Authority certificate bundle to be added store.</param>
            <returns>
            True if the certificate bundle was correctly added to the device certificate store.
            </returns>
            <remarks>
            This method is exclusive of nanoFramework. There is no equivalent in .NET framework.
            </remarks>
        </member>
        <member name="M:System.Net.Security.CertificateManager.AddCaCertificateBundle(System.String)">
            <summary>
            Adds a Certificate Authority Root bundle <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> to the store.
            If there is already a CA Root bundle it will be replaced with this one.
            </summary>
            <param name="ca">The Certificate Authority certificate bundle to be added store.</param>
            <returns>
            True if the certificate bundle was correctly added to the device certificate store.
            </returns>
            <remarks>
            This method is exclusive of nanoFramework. There is no equivalent in .NET framework.
            </remarks>
        </member>
        <member name="M:System.Net.Security.CertificateManager.AddCaCertificateBundle(System.Byte[])">
            <summary>
            Adds a Certificate Authority Root bundle <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> to the store.
            If there is already a CA Root bundle it will be replaced with this one.
            </summary>
            <param name="ca">The Certificate Authority certificate bundle to be added store.</param>
            <returns>
            True if the certificate bundle was correctly added to the device certificate store.
            </returns>
            <remarks>
            This method is exclusive of nanoFramework. There is no equivalent in .NET framework.
            </remarks>
        </member>
        <member name="T:System.Net.Security.SslProtocols">
            <summary>
            Defines the possible versions of Secure Sockets Layer (SSL).
            </summary>
            <remarks>
            Note: Following the recommendation of the .NET documentation, nanoFramework implementation does not have SSL3 nor Default because those are deprecated and unsecure.
            </remarks>
        </member>
        <member name="F:System.Net.Security.SslProtocols.None">
            <summary>
            Allows the operating system to choose the best protocol to use, and to block protocols that are not secure. Unless your app has a specific reason not to, you should use this field.
            </summary>
        </member>
        <member name="F:System.Net.Security.SslProtocols.Tls">
            <summary>
            Specifies the TLS 1.0 security protocol.
            The TLS protocol is defined in IETF RFC 2246.
            </summary>
        </member>
        <member name="F:System.Net.Security.SslProtocols.Tls11">
            <summary>
            Specifies the TLS 1.1 security protocol.
            The TLS protocol is defined in IETF RFC 4346.
            </summary>
        </member>
        <member name="F:System.Net.Security.SslProtocols.Tls12">
            <summary>
            Specifies the TLS 1.2 security protocol.
            The TLS protocol is defined in IETF RFC 5246.
            </summary>
        </member>
        <member name="T:System.Net.Security.SslVerification">
            <summary>
            The verification scheme to use for authentication.
            </summary>
        </member>
        <member name="F:System.Net.Security.SslVerification.NoVerification">
            <summary>
            No verification of certificates is required for authentication.
            </summary>
        </member>
        <member name="F:System.Net.Security.SslVerification.VerifyPeer">
            <summary>
            If authenticating as a client, verifies the peer certificate and fails if no certificate is sent. If authenticating as a server, 
            it verifies the peer certificate only if a certificate is sent.
            </summary>
        </member>
        <member name="F:System.Net.Security.SslVerification.CertificateRequired">
            <summary>
            A certificate is required for authentication. If authenticating as a client, the server certificate is required. 
            If authenticating as a server, the client certificate is required.
            </summary>
        </member>
        <member name="F:System.Net.Security.SslVerification.VerifyClientOnce">
            <summary>
            Verify the client certificate only once. Applies only to authenticating as a server.
            </summary>
        </member>
        <member name="T:System.Net.Security.SslStream">
            <summary>
            Provides a stream used for client-server communication that uses the Secure Socket Layer (SSL) security 
            protocol to authenticate the server and optionally the client.
            </summary>
        </member>
        <member name="P:System.Net.Security.SslStream.SslVerification">
            <summary>
            Option for SSL verification.
            The default behaviour is <see cref="F:System.Net.Security.SslVerification.CertificateRequired"/>.
            </summary>
        </member>
        <member name="M:System.Net.Security.SslStream.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes a new instance of the SslStream class using the specified Socket.
            </summary>
            <param name="socket">A valid socket that currently has a TCP connection.</param>
            <remarks>
            The SslStream maintains the lifetime of the socket. When the SslStream object is disposed, 
            the underlying TCP socket will be closed.
            </remarks>
        </member>
        <member name="M:System.Net.Security.SslStream.AuthenticateAsClient(System.String,System.Net.Security.SslProtocols)">
            <summary>
            Called by clients to authenticate the server and optionally the client in a client-server connection. 
            The authentication process uses the specified SSL protocols.
            </summary>
            <param name="targetHost">The name of the server that will share this SslStream.</param>
            <param name="enabledSslProtocols">The <see cref="T:System.Net.Security.SslProtocols"/> value that represents the protocol used for authentication.</param>
        </member>
        <member name="M:System.Net.Security.SslStream.AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509Certificate,System.Net.Security.SslProtocols)">
            <summary>
            Called by clients to authenticate the server and optionally the client in a client-server connection. 
            The authentication process uses the specified certificate collections and SSL protocols.
            </summary>
            <param name="targetHost">The name of the server that will share this SslStream.</param>
            <param name="clientCertificate">The client certificate.</param>
            <param name="enabledSslProtocols">The <see cref="T:System.Net.Security.SslProtocols"/> value that represents the protocol used for authentication.</param>
        </member>
        <member name="M:System.Net.Security.SslStream.AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Certificate,System.Net.Security.SslProtocols)">
            <summary>
            Called by clients to authenticate the server and optionally the client in a client-server connection. 
            The authentication process uses the specified certificate collections and SSL protocols.
            </summary>
            <param name="targetHost">The name of the server that will share this SslStream.</param>
            <param name="clientCertificate">The client certificate.</param>
            <param name="ca">Certificate Authority certificate to use for authentication with the server.</param>
            <param name="enabledSslProtocols">The <see cref="T:System.Net.Security.SslProtocols"/> value that represents the protocol used for authentication.</param>
        </member>
        <member name="M:System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Net.Security.SslProtocols)">
            <summary>
            Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificate, 
            verification requirements and security protocol.
            </summary>
            <param name="serverCertificate">The certificate used to authenticate the server.</param>
            <param name="enabledSslProtocols">The protocols that may be used for authentication.</param>
        </member>
        <member name="M:System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Net.Security.SslProtocols)">
            <summary>
            Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificates, requirements and security protocol.
            </summary>
            <param name="serverCertificate">The X509Certificate used to authenticate the server.</param>
            <param name="clientCertificateRequired">A <see cref="T:System.Boolean"/> value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request, if no certificate is provided, the server still accepts the connection request.</param>
            <param name="enabledSslProtocols">The protocols that may be used for authentication.</param>
        </member>
        <member name="P:System.Net.Security.SslStream.IsServer">
            <summary>
            Gets a value that indicates whether the local side of the connection used by this SslStream was authenticated as the server.
            </summary>
        </member>
        <member name="P:System.Net.Security.SslStream.Length">
            <summary>
            Gets the length of the stream. (Overrides NetworkStream. . :: . .Length.)
            </summary>
        </member>
        <member name="P:System.Net.Security.SslStream.DataAvailable">
            <summary>
            Gets a value the indicates whether data is available in the stream. (Overrides NetworkStream. . :: . .DataAvailable.)
            </summary>
        </member>
        <member name="M:System.Net.Security.SslStream.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Net.Security.SslStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the SslStream and optionally releases the managed resources. 
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:System.Net.Security.SslStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from this stream and stores it in the specified array.
            </summary>
            <param name="buffer">An array that receives the bytes read from this stream.</param>
            <param name="offset">An integer that contains the zero-based location in buffer at which to begin storing the data read from this stream.</param>
            <param name="size">The maximum number of bytes to read from this stream.</param>
            <returns></returns>
        </member>
        <member name="M:System.Net.Security.SslStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write the specified number of bytes to the underlying stream using the specified buffer and offset.
            </summary>
            <param name="buffer">An array that supplies the bytes written to the stream.</param>
            <param name="offset">he zero-based location in buffer at which to begin reading bytes to be written to the stream.</param>
            <param name="size">The number of bytes to read from buffer.</param>
        </member>
        <member name="T:System.Net.SocketAddress">
            <summary>
            Stores serialized information from <see cref="T:System.Net.EndPoint"/> derived classes.
            </summary>
        </member>
        <member name="P:System.Net.SocketAddress.Family">
            <summary>
            Gets the address family for the current address.
            </summary>
            <value>A value specifying the addressing scheme that is used to resolve the current address.</value>
        </member>
        <member name="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:System.Net.SocketAddress"/> class using the specified address family and buffer size.
            </summary>
            <param name="family">An <see cref="T:System.Net.Sockets.AddressFamily"/> enumerated value.</param>
            <param name="size">The number of bytes to allocate for the underlying buffer.</param>
            <remarks>
            Use this overload to create a new instance of the <see cref="T:System.Net.SocketAddress"/> class with a particular underlying buffer size.
            </remarks>
        </member>
        <member name="P:System.Net.SocketAddress.Size">
            <summary>
            Gets the underlying buffer size of the <see cref="T:System.Net.SocketAddress"/>.
            </summary>
            <value>
            The underlying buffer size of the <see cref="T:System.Net.SocketAddress"/>.
            </value>
            <remarks>
            This property gets the underlying buffer size of the <see cref="T:System.Net.SocketAddress"/> in bytes.
            </remarks>
        </member>
        <member name="P:System.Net.SocketAddress.Item(System.Int32)">
            <summary>
            Gets or sets the specified index element in the underlying buffer.
            </summary>
            <param name="offset">The array index element of the desired information.</param>
            <value>The value of the specified index element in the underlying buffer.</value>
            <remarks>
            This property gets or sets the specified byte position in the underlying buffer.
            </remarks>
        </member>
        <member name="T:System.Net.Sockets.SocketException">
            <summary>
            The exception that is thrown when a socket error occurs.
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketException.#ctor(System.Net.Sockets.SocketError)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Sockets.SocketException"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="P:System.Net.Sockets.SocketException.ErrorCode">
            <summary>
            Gets the error code that is associated with this exception.
            </summary>
            <remarks>
            <para>The ErrorCode property contains the error code that is associated with the error that caused the exception.</para>
            <para>The default constructor for <see cref="T:System.Net.Sockets.SocketException"/> sets the ErrorCode property to the last operating system error that occurred. For more information about socket error codes, see the Windows Sockets version 2 API error code documentation in MSDN.</para>
            </remarks>
        </member>
        <member name="T:System.Net.Sockets.AddressFamily">
            <summary>
             Specifies the address families that an instance of the <see cref='T:System.Net.Sockets.Socket'/>
            </summary>
            <remarks>
            An AddressFamily member specifies the addressing scheme that a <see cref="T:System.Net.Sockets.Socket"/> will use to resolve an address. For example, 
            InterNetwork indicates that an IP version 4 address is expected when a <see cref="T:System.Net.Sockets.Socket"/> connects to an endpoint.
            </remarks>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.Unknown">
            <summary>
            Unknown address family.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.Unspecified">
            <summary>
            Unspecified address family.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.Unix">
            <summary>
            Unix local to host address.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.InterNetwork">
            <summary>
            Address for IP version 4.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.ImpLink">
            <summary>
            ARPANET IMP address.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.Pup">
            <summary>
            Address for PUP protocols.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.Chaos">
            <summary>
            Address for MIT CHAOS protocols.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.NS">
            <summary>
            Address for Xerox NS protocols.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.Ipx">
            <summary>
            IPX or SPX address.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.Iso">
            <summary>
            Address for ISO protocols.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.Osi">
            <summary>
            Address for OSI protocols.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.Ecma">
            <summary>
            European Computer Manufacturers Association (ECMA) address.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.DataKit">
            <summary>
            Address for Datakit protocols.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.Ccitt">
            <summary>
            Addresses for CCITT protocols, such as X.25.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.Sna">
            <summary>
            IBM SNA address.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.DecNet">
            <summary>
            DECnet address.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.DataLink">
            <summary>
            Direct data-link interface address.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.Lat">
            <summary>
            LAT address.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.HyperChannel">
            <summary>
            NSC Hyperchannel address.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.AppleTalk">
            <summary>
            AppleTalk address.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.NetBios">
            <summary>
            NetBios address.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.VoiceView">
            <summary>
            VoiceView address.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.FireFox">
            <summary>
            FireFox address.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.Banyan">
            <summary>
            Banyan address.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.Atm">
            <summary>
            Native ATM services address.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.InterNetworkV6">
            <summary>
            Internetwork Version 6.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.Cluster">
            <summary>
            Address for Microsoft cluster products.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.Ieee12844">
            <summary>
            IEEE 1284.4 workgroup address.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.Irda">
            <summary>
            IrDA address.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.NetworkDesigners">
            <summary>
            Address for Network Designers OSI gateway-enabled protocols.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AddressFamily.Max">
            <summary>
            MAX address.
            </summary>
        </member>
        <member name="T:System.Net.Sockets.NetworkStream">
            <summary>
            Provides the underlying stream of data for network access.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.NetworkStream._socketType">
            <summary>
            Internal property used to store the socket type
            </summary>
        </member>
        <member name="F:System.Net.Sockets.NetworkStream._remoteEndPoint">
            <summary>
            Internal endpoint ref used for dgram sockets
            </summary>
        </member>
        <member name="F:System.Net.Sockets.NetworkStream._disposed">
            <summary>
            Internal disposed flag
            </summary>
        </member>
        <member name="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Creates a new instance of the System.Net.Sockets.NetworkStream class for the specified System.Net.Sockets.Socket.
            </summary>
            <param name="socket">The System.Net.Sockets.Socket that the System.Net.Sockets.NetworkStream will use to send and receive data.</param>
        </member>
        <member name="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
            <summary>
            Initializes a new instance of the System.Net.Sockets.NetworkStream class for the specified 
            System.Net.Sockets.Socket with the specified System.Net.Sockets.Socket ownership.
            </summary>
            <param name="socket">true to indicate that the System.Net.Sockets.NetworkStream will take ownership of the System.Net.Sockets.Socket; 
            otherwise, false.</param>
            <param name="ownsSocket">The System.Net.Sockets.Socket that the System.Net.Sockets.NetworkStream will
            use to send and receive data.</param>
        </member>
        <member name="P:System.Net.Sockets.NetworkStream.CanRead">
            <summary>
            Gets a value that indicates whether the System.Net.Sockets.NetworkStream supports reading.
            </summary>
            <value>true if data can be read from the stream; otherwise, false. The default value is true.</value>
            <remarks>
            If CanRead is true, <see cref="T:System.Net.Sockets.NetworkStream"/> allows calls to the <see cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)"/> method. Provide the appropriate FileAccess enumerated value in the constructor to set 
            the readability and writability of the <see cref="T:System.Net.Sockets.NetworkStream"/>. The CanRead property is set when the <see cref="T:System.Net.Sockets.NetworkStream"/> is initialized.
            </remarks>
        </member>
        <member name="P:System.Net.Sockets.NetworkStream.CanSeek">
            <summary>
            Gets a value that indicates whether the stream supports seeking. This property is not currently supported.This property always returns false.
            </summary>
            <value>false in all cases to indicate that System.Net.Sockets.NetworkStream cannot seek a specific location in the stream.</value>
        </member>
        <member name="P:System.Net.Sockets.NetworkStream.CanTimeout">
            <summary>
            Indicates whether timeout properties are usable for System.Net.Sockets.NetworkStream.
            </summary>
            <value>true in all cases.</value>
        </member>
        <member name="P:System.Net.Sockets.NetworkStream.CanWrite">
            <summary>
            Gets a value that indicates whether the System.Net.Sockets.NetworkStream supports writing.
            </summary>
            <value>true if data can be written to the System.Net.Sockets.NetworkStream; otherwise, false. The default value is true.</value>
        </member>
        <member name="P:System.Net.Sockets.NetworkStream.ReadTimeout">
            <summary>
            Gets or sets the amount of time that a read operation blocks waiting for data. 
            </summary>
            <value>A Int32 that specifies the amount of time, in milliseconds, that will elapse before a read operation fails. The default value, Infinite, specifies that the read operation does not time out.</value>
        </member>
        <member name="P:System.Net.Sockets.NetworkStream.WriteTimeout">
            <summary>
            Gets or sets the amount of time that a write operation blocks waiting for data.
            </summary>
            <value>A Int32 that specifies the amount of time, in milliseconds, that will elapse before a write operation fails. The default value, Infinite, specifies that the write operation does not time out.</value>
        </member>
        <member name="P:System.Net.Sockets.NetworkStream.Length">
            <summary>
            Gets the length of the data available on the stream.
            This property is not currently supported and always throws a NotSupportedException.
            </summary>
            <value>The length of the data available on the stream.</value>
        </member>
        <member name="P:System.Net.Sockets.NetworkStream.Position">
            <summary>
            Gets or sets the current position in the stream. This property is not currently supported and always throws a NotSupportedException.
            </summary>
            <value>The current position in the stream.</value>
        </member>
        <member name="P:System.Net.Sockets.NetworkStream.DataAvailable">
            <summary>
            Gets a value that indicates whether data is available on the <see cref="T:System.Net.Sockets.NetworkStream"/> to be read.
            </summary>
            <value>true if data is available on the stream to be read; otherwise, false.</value>
        </member>
        <member name="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
            <summary>
            Closes the <see cref="T:System.Net.Sockets.NetworkStream"/> after waiting the specified time to allow data to be sent.
            </summary>
            <param name="timeout">A 32-bit signed integer that specifies the number of milliseconds to wait to send any remaining data before closing.</param>
            <remarks>
            <para>The <see cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)"/> method frees both unmanaged and managed resources associated with the <see cref="T:System.Net.Sockets.NetworkStream"/>. If the <see cref="T:System.Net.Sockets.NetworkStream"/> owns the underlying Socket, it is closed as well.</para>
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.NetworkStream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
            <remarks>
            <para>This method is called by the public Dispose method and the Finalize method. Dispose invokes the protected Dispose(Boolean) method with the disposing parameter set to true. Finalize invokes Dispose with disposing set to false.</para>
            <para>When the disposing parameter is true, this method releases all resources held by any managed objects that this NetworkStream references. This method invokes the Dispose method of each referenced object.</para>
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.NetworkStream.Flush">
            <summary>
            Flushes data from the stream. This method is reserved for future use.
            </summary>
        </member>
        <member name="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the NetworkStream.
            </summary>
            <param name="buffer">An array of type Byte that is the location in memory to store data read from the NetworkStream.</param>
            <param name="offset">The location in buffer to begin storing the data to.</param>
            <param name="count">The number of bytes to read from the NetworkStream.</param>
            <returns>The number of bytes read from the NetworkStream.</returns>
            <remarks>
            <para>This method reads data into the buffer parameter and returns the number of bytes successfully read. If no data is available for reading, the Read method returns 0. The Read operation reads as much data as is available, up to the number of bytes specified by the count parameter. If the remote host shuts down the connection, and all available data has been received, the Read method completes immediately and return zero bytes.</para>
            <note type="important">
            Check to see if the <see cref="T:System.Net.Sockets.NetworkStream"/> is readable by calling the <see cref="P:System.Net.Sockets.NetworkStream.CanRead"/> property. If you attempt to read from a <see cref="T:System.Net.Sockets.NetworkStream"/> that is not readable, you will get an IOException.
            </note>
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of the stream to the given value. This method is
            not currently supported and always throws a System.NotSupportedException.
            </summary>
            <param name="offset">This parameter is not used.</param>
            <param name="origin">This parameter is not used.</param>
            <returns>The position in the stream.</returns>
        </member>
        <member name="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)">
            <summary>
             Sets the length of the stream. This method always throws a System.NotSupportedException.
            </summary>
            <param name="value">This parameter is not used.</param>
        </member>
        <member name="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the <see cref="T:System.Net.Sockets.NetworkStream"/>.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to write to the NetworkStream.</param>
            <param name="offset">The location in buffer from which to start writing data.</param>
            <param name="count">The number of bytes to write to the NetworkStream.</param>
            <remarks>
            The Write method starts at the specified offset and sends count bytes from the contents of buffer to the network. 
            The Write method blocks until the requested number of bytes is sent or a SocketException is thrown. 
            If you receive a <see cref="T:System.Net.Sockets.SocketException"/>, use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode"/> property to obtain 
            the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.
            </remarks>
        </member>
        <member name="T:System.Net.Sockets.ProtocolFamily">
            <summary>
            Specifies the type of protocol that an instance of the <see cref='T:System.Net.Sockets.Socket'/>
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.Unknown">
            <summary>
            Unknown protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.Unspecified">
            <summary>
            Unspecified protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.Unix">
            <summary>
            Unix local to host protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.InterNetwork">
            <summary>
            IP version 4 protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.ImpLink">
            <summary>
            ARPANET IMP protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.Pup">
            <summary>
            PUP protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.Chaos">
            <summary>
            MIT CHAOS protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.NS">
            <summary>
            Xerox NS protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.Ipx">
            <summary>
            IPX or SPX protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.Iso">
            <summary>
            ISO protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.Osi">
            <summary>
            OSI protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.Ecma">
            <summary>
            European Computer Manufacturers Association (ECMA) protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.DataKit">
            <summary>
            DataKit protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.Ccitt">
            <summary>
            CCITT protocol, such as X.25.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.Sna">
            <summary>
            IBM SNA protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.DecNet">
            <summary>
            DECNet protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.DataLink">
            <summary>
            Direct data link protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.Lat">
            <summary>
            LAT protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.HyperChannel">
            <summary>
            NSC HyperChannel protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.AppleTalk">
            <summary>
            AppleTalk protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.NetBios">
            <summary>
            NetBIOS protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.VoiceView">
            <summary>
            VoiceView protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.FireFox">
            <summary>
            FireFox protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.Banyan">
            <summary>
            Banyan protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.Atm">
            <summary>
            Native ATM services protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.InterNetworkV6">
            <summary>
            IP version 6 protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.Cluster">
            <summary>
            Microsoft Cluster products protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.Ieee12844">
            <summary>
            IEEE 1284.4 workgroup protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.Irda">
            <summary>
            IrDA protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.NetworkDesigners">
            <summary>
            Network Designers OSI gateway enabled protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolFamily.Max">
            <summary>
            MAX protocol.
            </summary>
        </member>
        <member name="T:System.Net.Sockets.ProtocolType">
            <summary>
            Specifies the protocols that the <see cref='T:System.Net.Sockets.Socket'/> class supports.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.IP">
            <summary>
            Internet Protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.IPv6HopByHopOptions">
            <summary>
            Pv6 Hop by Hop Options header.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.Icmp">
            <summary>
            Internet Control Message Protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.Igmp">
            <summary>
            Internet Group Management Protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.Ggp">
            <summary>
            Gateway To Gateway Protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.IPv4">
            <summary>
            Internet Protocol version 4.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.Tcp">
            <summary>
            Transmission Control Protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.Pup">
            <summary>
            PARC Universal Packet Protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.Udp">
            <summary>
            User Datagram Protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.Idp">
            <summary>
            Internet Datagram Protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.IPv6">
            <summary>
            Internet Protocol version 6 (IPv6).
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.IPv6RoutingHeader">
            <summary>
            IPv6 Routing header.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.IPv6FragmentHeader">
            <summary>
            IPv6 Fragment header.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.IPSecEncapsulatingSecurityPayload">
            <summary>
            IPv6 Encapsulating Security Payload header.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.IPSecAuthenticationHeader">
            <summary>
            IPv6 Authentication header. For details, see RFC 2292 section 2.2.1, available at http://www.ietf.org.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.IcmpV6">
            <summary>
            Internet Control Message Protocol for IPv6.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.IPv6NoNextHeader">
            <summary>
            IPv6 No next header.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.IPv6DestinationOptions">
            <summary>
            IPv6 Destination Options header.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.ND">
            <summary>
            Net Disk Protocol (unofficial).
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.Raw">
            <summary>
            Raw IP packet protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.Unspecified">
            <summary>
            Unspecified protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.Ipx">
            <summary>
            Internet Packet Exchange Protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.Spx">
            <summary>
            Sequenced Packet Exchange protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.SpxII">
            <summary>
            Sequenced Packet Exchange version 2 protocol.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.ProtocolType.Unknown">
            <summary>
            Unknown protocol.
            </summary>
        </member>
        <member name="T:System.Net.Sockets.SelectMode">
            <summary>
            Specifies the mode for polling the status of a socket.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SelectMode.SelectRead">
            <summary>
            Poll the read status of a socket.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SelectMode.SelectWrite">
            <summary>
            Poll the write status of a socket.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SelectMode.SelectError">
            <summary>
            Poll the error status of a socket.
            </summary>
        </member>
        <member name="T:System.Net.Sockets.Socket">
            <summary>
            Implements the Berkeley sockets interface.
            </summary>
        </member>
        <member name="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Initializes a new instance of the Socket class using the specified address family, socket type and protocol.
            </summary>
            <param name="addressFamily">One of the <see cref="T:System.Net.Sockets.AddressFamily"/> values.</param>
            <param name="socketType">One of the <see cref="P:System.Net.Sockets.Socket.SocketType"/> values.</param>
            <param name="protocolType">One of the <see cref="T:System.Net.Sockets.ProtocolType"/> values.</param>
            <remarks>
            The addressFamily parameter specifies the addressing scheme that the <see cref="T:System.Net.Sockets.Socket"/> class uses, the socketType parameter specifies the type of the <see cref="T:System.Net.Sockets.Socket"/> class, 
            and the protocolType parameter specifies the protocol used by <see cref="T:System.Net.Sockets.Socket"/>. The three parameters are not independent. Some address families restrict which 
            protocols can be used with them, and often the <see cref="T:System.Net.Sockets.Socket"/> type is implicit in the protocol. If the combination of address family, <see cref="T:System.Net.Sockets.Socket"/> type, and protocol type
            esults in an invalid Socket, this constructor throws a SocketException.
            </remarks>
        </member>
        <member name="P:System.Net.Sockets.Socket.Available">
            <summary>
            Gets the amount of data that has been received from the network and is available to be read.
            </summary>
            <value>
            An integer error code that is associated with this exception.
            </value>
            <remarks>
            <para>
            If you are using a non-blocking <see cref="T:System.Net.Sockets.Socket"/>, <see cref="P:System.Net.Sockets.Socket.Available"/> is a good way to determine whether data is queued for reading, before calling <see cref="M:System.Net.Sockets.Socket.Receive(System.Byte[])"/>. The available data
            is the total amount of data queued in the network buffer for reading. If no data is queued in the network buffer, <see cref="P:System.Net.Sockets.Socket.Available"/> returns 0.
            </para>
            <para>
            If the remote host shuts down or closes the connection, <see cref="P:System.Net.Sockets.Socket.Available"/> can throw a <see cref="T:System.Net.Sockets.SocketException"/>. If you receive a <see cref="T:System.Net.Sockets.SocketException"/>, use the 
            <see cref="P:System.Net.Sockets.SocketException.ErrorCode"/> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API 
            error code documentation in the MSDN library for a detailed description of the error.
            </para>
            </remarks>
        </member>
        <member name="P:System.Net.Sockets.Socket.LocalEndPoint">
            <summary>
            Gets the local endpoint.
            </summary>
            <value>The EndPoint that the Socket is using for communications.</value>
            <remarks>
            <para>
            The LocalEndPoint property gets an <see cref="T:System.Net.EndPoint"/> that contains the local IP address and port number to which your <see cref="T:System.Net.Sockets.Socket"/> is bound. You must cast this 
            <see cref="T:System.Net.EndPoint"/> to an <see cref="T:System.Net.IPEndPoint"/> before retrieving any information. You can then call the <see cref="P:System.Net.IPEndPoint.Address"/> method to retrieve the local <see cref="T:System.Net.IPAddress"/>, and the 
            <see cref="P:System.Net.IPEndPoint.Port"/> method to retrieve the local port number.
            </para>
            <para>
            The LocalEndPoint property is usually set after you make a call to the <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)"/> method. If you allow the system to assign your socket's local IP address and
            port number, the LocalEndPoint property will be set after the first I/O operation. For connection-oriented protocols, the first I/O operation would be a call 
            to the Connect or <see cref="M:System.Net.Sockets.Socket.Accept"/> method. For connectionless protocols, the first I/O operation would be any of the send or receive calls.
            </para>
            </remarks>
        </member>
        <member name="P:System.Net.Sockets.Socket.RemoteEndPoint">
            <summary>
            Gets the remote endpoint.
            </summary>
            <value>
            The <see cref="T:System.Net.EndPoint"/> with which the <see cref="T:System.Net.Sockets.Socket"/> is communicating.
            </value>
            <remarks>
            <para>
            If you are using a connection-oriented protocol, the RemoteEndPoint property gets the <see cref="T:System.Net.EndPoint"/> that contains the remote IP address and port number to
            which the <see cref="T:System.Net.Sockets.Socket"/> is connected. If you are using a connectionless protocol, RemoteEndPoint contains the default remote IP address and port number with 
            which the <see cref="T:System.Net.Sockets.Socket"/> will communicate. You must cast this <see cref="T:System.Net.EndPoint"/> to an <see cref="T:System.Net.IPEndPoint"/> before retrieving any information. You can then call the 
            <see cref="P:System.Net.IPEndPoint.Address"/> method to retrieve the remote <see cref="T:System.Net.IPAddress"/>, and the <see cref="P:System.Net.IPEndPoint.Port"/> method to retrieve the remote port number.
            </para>
            <para>
            The RemoteEndPoint is set after a call to either <see cref="M:System.Net.Sockets.Socket.Accept"/> or <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)"/>. If you try to access this property earlier, RemoteEndPoint will throw a <see cref="T:System.Net.Sockets.SocketException"/>. 
            If you receive a <see cref="T:System.Net.Sockets.SocketException"/>, use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode"/> property to obtain the specific error code. After you have obtained this code, refer
            to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.
            </para>
            </remarks>
        </member>
        <member name="P:System.Net.Sockets.Socket.ReceiveTimeout">
            <summary>
            Gets or sets a value that specifies the amount of time after which a synchronous <see cref="M:System.Net.Sockets.Socket.Receive(System.Byte[])"/> call will time out.
            </summary>
            <value>
            The time-out value, in milliseconds. The default value is 0, which indicates an infinite time-out period. Specifying -1 also indicates an infinite time-out period.
            </value>
            <remarks>
            This option applies to synchronous <see cref="M:System.Net.Sockets.Socket.Receive(System.Byte[])"/> calls only. If the time-out period is exceeded, the <see cref="M:System.Net.Sockets.Socket.Receive(System.Byte[])"/> method will throw a <see cref="T:System.Net.Sockets.SocketException"/>.
            </remarks>
        </member>
        <member name="P:System.Net.Sockets.Socket.SendTimeout">
            <summary>
            Gets or sets a value that specifies the amount of time after which a synchronous <see cref="M:System.Net.Sockets.Socket.Send(System.Byte[])"/> call will time out.
            </summary>
            <value>
            The time-out value, in milliseconds. If you set the property with a value between 1 and 499, 
            the value will be changed to 500. The default value is 0, which indicates an infinite time-out period. Specifying -1 also indicates an infinite time-out period.
            </value>
            <remarks>
            This option applies to synchronous <see cref="M:System.Net.Sockets.Socket.Send(System.Byte[])"/> calls only. If the time-out period is exceeded, the <see cref="M:System.Net.Sockets.Socket.Send(System.Byte[])"/> method will throw a <see cref="T:System.Net.Sockets.SocketException"/>.
            </remarks>
        </member>
        <member name="P:System.Net.Sockets.Socket.SocketType">
            <summary>
            Gets the type of the <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
            <value>
            One of the <see cref="P:System.Net.Sockets.Socket.SocketType"/> values.
            </value>
            <remarks>
            <see cref="P:System.Net.Sockets.Socket.SocketType"/> is read-only and is set when the <see cref="T:System.Net.Sockets.Socket"/> is created.
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)">
            <summary>
            Associates a <see cref="T:System.Net.Sockets.Socket"/> with a local endpoint.
            </summary>
            <param name="localEP">The local <see cref="T:System.Net.EndPoint"/> to associate with the <see cref="T:System.Net.Sockets.Socket"/>.</param>
            <remarks>
            <para>
            Use the Bind method if you need to use a specific local endpoint. You must call Bind before you can call the <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)"/> method. You do not need to call Bind
            before using the <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)"/> method unless you need to use a specific local endpoint. You can use the Bind method on both connectionless and 
            connection-oriented protocols.
            </para>
            <para>
            Before calling Bind, you must first create the local <see cref="T:System.Net.IPEndPoint"/> from which you intend to communicate data. If you do not care which local address is
            assigned, you can create an <see cref="T:System.Net.IPEndPoint"/> using <see cref="F:System.Net.IPAddress.Any"/> as the address parameter, and the underlying service provider will assign the most 
            appropriate network address. This might help simplify your application if you have multiple network interfaces. If you do not care which local port 
            is used, you can create an <see cref="T:System.Net.IPEndPoint"/> using 0 for the port number. In this case, the service provider will assign an available port number between 1024 and 5000.
            </para>
            <para>
            If you use the above approach, you can discover what local network address and port number has been assigned by calling the <see cref="P:System.Net.Sockets.Socket.LocalEndPoint"/>. If you are using a 
            connection-oriented protocol, <see cref="P:System.Net.Sockets.Socket.LocalEndPoint"/> will not return the locally assigned network address until after you have made a call to the <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)"/> method. If 
            you are using a connectionless protocol, you will not have access to this information until you have completed a send or receive.
            </para>
            <c>If you intend to receive multicast datagrams, you must call the Bind method with a multicast port number.</c>
            <c>You must call the Bind method if you intend to receive connectionless datagrams using the ReceiveFrom method.</c> 
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)">
            <summary>
            Establishes a connection to a remote host.
            </summary>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/> that represents the remote device.</param>
            <remarks>
            <para>
            If you are using a connection-oriented protocol such as TCP, the Connect method synchronously establishes a network connection between <see cref="P:System.Net.Sockets.Socket.LocalEndPoint"/>
            and the specified remote endpoint. If you are using a connectionless protocol, Connect establishes a default remote host. After you call Connect, you can 
            send data to the remote device with the <see cref="M:System.Net.Sockets.Socket.Send(System.Byte[])"/> method, or receive data from the remote device with the <see cref="M:System.Net.Sockets.Socket.Receive(System.Byte[])"/> method.
            </para>
            <para>
            If you are using a connectionless protocol such as UDP, you do not have to call Connect before sending and receiving data. You can use <see cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)"/> and 
            <see cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)"/> to synchronously communicate with a remote host. If you do call Connect, any datagrams that arrive from an address other than the 
            specified default will be discarded. If you want to set your default remote host to a broadcast address, you must first call the <see cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)"/> method and 
            set the socket option to <see cref="F:System.Net.Sockets.SocketOptionName.Broadcast"/>, or Connect will throw a SocketException. If you receive a <see cref="T:System.Net.Sockets.SocketException"/>, use the 
            <see cref="P:System.Net.Sockets.SocketException.ErrorCode"/> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API 
            error code documentation in the MSDN library for a detailed description of the error.
            </para>
            <para>
            <c>
            If you are using a connection-oriented protocol and did not call Bind before calling Connect, the underlying service provider will assign the local network address and port number. If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you complete a send or receive operation. 
            If you want to change the default remote host, call Connect again with the desired endpoint.
            </c>
            </para>
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.Socket.Close">
            <summary>
            Closes the <see cref="T:System.Net.Sockets.Socket"/> connection and releases all associated resources.
            </summary>
            <remarks>
            The Close method closes the remote host connection and releases all managed and unmanaged resources associated with the Socket. 
            Upon closing, the Connected property is set to false.
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.Socket.Listen(System.Int32)">
            <summary>
            Places a <see cref="T:System.Net.Sockets.Socket"/> in a listening state.
            </summary>
            <param name="backlog">The maximum length of the pending connections queue.</param>
            <remarks>
            <para>
            Listen causes a connection-oriented <see cref="T:System.Net.Sockets.Socket"/> to listen for incoming connection attempts. The backlog parameter specifies the number of incoming 
            connections that can be queued for acceptance. To determine the maximum number of connections you can specify, retrieve the <see cref="F:System.Net.Sockets.SocketOptionName.MaxConnections"/> value. 
            Listen does not block.
            </para>
            <para>
            If you receive a <see cref="T:System.Net.Sockets.SocketException"/>, use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode"/> property to obtain the specific error code. After you have obtained this code, refer to the 
            Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. Use <see cref="M:System.Net.Sockets.Socket.Accept"/> or BeginAccept 
            to accept a connection from the queue.
            </para>
            <para>
            <c>You must call the <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)"/> method before calling Listen, or Listen will throw a <see cref="T:System.Net.Sockets.SocketException"/>.</c>
            </para>
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.Socket.Accept">
            <summary>
            Creates a new <see cref="T:System.Net.Sockets.Socket"/> for a newly created connection.
            </summary>
            <remarks>
            <para>Accept synchronously extracts the first pending connection request from the connection request queue of the listening socket, and then creates and 
            returns a new <see cref="T:System.Net.Sockets.Socket"/>. You cannot use this returned <see cref="T:System.Net.Sockets.Socket"/> to accept any additional connections from the connection queue. However, you can call the 
            <see cref="P:System.Net.Sockets.Socket.RemoteEndPoint"/> method of the returned <see cref="T:System.Net.Sockets.Socket"/> to identify the remote host's network address and port number.
            </para>
            <para>
            <c>Before calling the Accept method, you must first call the Listen method to listen for and queue incoming connection requests.</c>
            </para>
            </remarks>
            <returns>A <see cref="T:System.Net.Sockets.Socket"/> for a newly created connection.</returns>
        </member>
        <member name="M:System.Net.Sockets.Socket.Send(System.Byte[])">
            <summary>
            Sends data to a connected <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to be sent</param>
            <returns>The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket"/>.</returns>
            <remarks>
            <para><see cref="M:System.Net.Sockets.Socket.Send(System.Byte[])"/> synchronously sends data to the remote host specified in the <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)"/> or <see cref="M:System.Net.Sockets.Socket.Accept"/> method and returns the number of bytes successfully sent. <see cref="M:System.Net.Sockets.Socket.Send(System.Byte[])"/> 
            can be used for both connection-oriented and connectionless protocols.</para>
            <para>This overload requires a buffer that contains the data you want to send. The <see cref="T:System.Net.Sockets.SocketFlags"/> value defaults to 0, the buffer offset defaults to 0, and the number of bytes to send defaults to the size of the buffer.</para>
            <para>If you are using a connectionless protocol, you must call <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)"/> before calling this method, or <see cref="o:Send"/> will throw a <see cref="T:System.Net.Sockets.SocketException"/>. If you are using a connection-oriented protocol, you must either 
            use <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)"/> to establish a remote host connection, or use <see cref="M:System.Net.Sockets.Socket.Accept"/> to accept an incoming connection.</para>
            <para>If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <see cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)"/> method. If you do not use the 
            SendTo method, you will have to call Connect before each call to Send. You can use SendTo even after you have established a default remote host with 
            Connect. You can also change the default remote host prior to calling Send by making another call to Connect.</para>
            <para>
            If you are using a connection-oriented protocol, <see cref="o:SendTo()"/> will block until all of the bytes in the buffer are sent, unless a time-out was set by using 
            <see cref="P:System.Net.Sockets.Socket.SendTimeout"/>. If the time-out value was exceeded, the <see cref="o:SendTo()"/> call will throw a <see cref="T:System.Net.Sockets.SocketException"/>. In nonblocking mode, Send may complete 
            successfully even if it sends less than the number of bytes in the buffer. It is your application's responsibility to keep track of the number of bytes sent and 
            to retry the operation until the application sends the bytes in the buffer. There is also no guarantee that the data you send will appear on the network 
            immediately. To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected. A 
            successful completion of the <see cref="M:System.Net.Sockets.Socket.Send(System.Byte[])"/> method means that the underlying system has had room to buffer your data for a network send.
            </para>
            <note type="important">
            If you receive a SocketException, use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode"/> property to obtain the specific error code. After you have obtained this code, 
            refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.
            </note>
            <note type="important">
            The successful completion of a send does not indicate that the data was successfully delivered. 
            If no buffer space is available within the transport system to hold the data to be transmitted, 
            send will block unless the socket has been placed in nonblocking mode.
            </note>
            </remarks>
            <seealso cref="o:Send"/>
            <seealso cref="T:System.Net.Sockets.Socket"/>
            <seealso cref="N:System.Net.Sockets"/>
        </member>
        <member name="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to a connected <see cref="T:System.Net.Sockets.Socket"/> using the specified <see cref="T:System.Net.Sockets.SocketFlags"/>.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to be sent</param>
            <param name="socketFlags"></param>
            <returns>The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket"/>.</returns>
            <remarks>
            <para><see cref="o:Send()"/> synchronously sends data to the remote host specified in the <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)"/> or <see cref="M:System.Net.Sockets.Socket.Accept"/> method and returns the number of bytes successfully sent. <see cref="o:Send()"/> 
            can be used for both connection-oriented and connectionless protocols.</para>
            <para>his overload requires a buffer that contains the data you want to send and a bitwise combination of SocketFlags. 
            The buffer offset defaults to 0, and the number of bytes to send defaults to the size of the buffer. If you specify the 
            DontRoute flag as the socketflags parameter value, the data you are sending will not be routed.
            </para>
            <note type="important">
            You must ensure that the size of your buffer does not exceed the maximum packet size of the underlying service provider. 
            If it does, the datagram will not be sent and <see cref="o:Send"/> will throw a <see cref="T:System.Net.Sockets.SocketException"/>. If you receive a 
            <see cref="T:System.Net.Sockets.SocketException"/>, use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode"/> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.
            </note>
            <note type="important">
            The successful completion of a send does not indicate that the data was successfully delivered. 
            If no buffer space is available within the transport system to hold the data to be transmitted, 
            send will block unless the socket has been placed in nonblocking mode.
            </note>
            </remarks>
            <seealso cref="o:Send"/>
            <seealso cref="T:System.Net.Sockets.Socket"/>
            <seealso cref="N:System.Net.Sockets"/>
        </member>
        <member name="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends the specified number of bytes of data to a connected <see cref="T:System.Net.Sockets.Socket"/>, using the specified <see cref="T:System.Net.Sockets.SocketFlags"/>.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to be sent</param>
            <param name="size"></param>
            <param name="socketFlags"></param>
            <returns>The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket"/>.</returns>
            <remarks>
            <para><see cref="o:Send()"/> synchronously sends data to the remote host specified in the <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)"/> or <see cref="M:System.Net.Sockets.Socket.Accept"/> method and returns the number of bytes successfully sent. <see cref="o:Send()"/> 
            can be used for both connection-oriented and connectionless protocols.</para>
            <para>This overload requires a buffer that contains the data you want to send, the number of bytes you want to send, 
            and a bitwise combination of any <see cref="T:System.Net.Sockets.SocketFlags"/>. If you specify the <see cref="F:System.Net.Sockets.SocketFlags.DontRoute"/> flag as the socketflags parameter, the data you are sending will not be routed.</para>
            <note type="important">
            You must ensure that the size of your buffer does not exceed the maximum packet size of the underlying service provider. 
            If it does, the datagram will not be sent and <see cref="o:Send"/> will throw a <see cref="T:System.Net.Sockets.SocketException"/>. If you receive a 
            <see cref="T:System.Net.Sockets.SocketException"/>, use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode"/> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.
            </note>
            <note type="important">
            The successful completion of a send does not indicate that the data was successfully delivered. 
            If no buffer space is available within the transport system to hold the data to be transmitted, 
            send will block unless the socket has been placed in nonblocking mode.
            </note>
            </remarks>
            <seealso cref="o:Send"/>
            <seealso cref="T:System.Net.Sockets.Socket"/>
            <seealso cref="N:System.Net.Sockets"/>
        </member>
        <member name="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends the specified number of bytes of data to a connected <see cref="T:System.Net.Sockets.Socket"/>, starting at the specified offset, and using the specified <see cref="T:System.Net.Sockets.SocketFlags"/>.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to be sent</param>
            <param name="offset"></param>
            <param name="size"></param>
            <param name="socketFlags"></param>
            <returns>The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket"/>.</returns>
            <remarks>
            <para><see cref="o:Send()"/> synchronously sends data to the remote host specified in the <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)"/> or <see cref="M:System.Net.Sockets.Socket.Accept"/> method and returns the number of bytes successfully sent. <see cref="o:Send()"/> 
            can be used for both connection-oriented and connectionless protocols.</para>
            <para>In this overload, if you specify the <see cref="F:System.Net.Sockets.SocketFlags.DontRoute"/> flag as the socketflags parameter, the data you are sending will not be routed.</para>
            <note type="important">
            The successful completion of a send does not indicate that the data was successfully delivered. 
            If no buffer space is available within the transport system to hold the data to be transmitted, 
            send will block unless the socket has been placed in nonblocking mode.
            </note>
            </remarks>
            <seealso cref="o:Send"/>
            <seealso cref="T:System.Net.Sockets.Socket"/>
            <seealso cref="N:System.Net.Sockets"/>
        </member>
        <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
            <summary>
            Sends data to the specified endpoint.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to be sent.</param>
            <param name="offset">The <see cref="T:System.Net.EndPoint"/> that represents the destination for the data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="remoteEP">The <see cref="T:System.Net.EndPoint"/> that represents the destination location for the data.</param>
            <returns>The number of bytes sent.</returns>
        </member>
        <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
            <summary>
            Sends the specified number of bytes of data to the specified endpoint using the specified SocketFlags.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to be sent.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="remoteEP">The <see cref="T:System.Net.EndPoint"/> that represents the destination location for the data.</param>
            <returns>The number of bytes sent.</returns>
        </member>
        <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
            <summary>
            Sends data to a specific endpoint using the specified <see cref="T:System.Net.Sockets.SocketFlags"/>.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to be sent.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="remoteEP">The <see cref="T:System.Net.EndPoint"/> that represents the destination location for the data.</param>
            <returns>The number of bytes sent.</returns>
            <remarks>
            <para>
            In this overload, the buffer offset defaults to 0, and the number of bytes to send defaults to the size of the buffer. If you specify the <see cref="F:System.Net.Sockets.SocketFlags.DontRoute"/> flag as the socketflags parameter, the data you are sending will not be routed.
            </para>
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)">
            <summary>
            Sends data to the specified endpoint.
            </summary>
            <param name="buffer">n array of type Byte that contains the data to be sent.</param>
            <param name="remoteEP">The <see cref="T:System.Net.EndPoint"/> that represents the destination location for the data.</param>
            <returns>The number of bytes sent.</returns>
            <remarks>
            In this overload, the buffer offset defaults to 0, the number of bytes to send defaults to the size of the buffer parameter, and the SocketFlags value defaults to 0.
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[])">
            <summary>
            Receives data from a bound <see cref="T:System.Net.Sockets.Socket"/> into a receive buffer.
            </summary>
            <param name="buffer">An array of type Byte that is the storage location for the received data.</param>
            <returns>The number of bytes received.</returns>
            <remarks>
            <para>
            The <see cref="M:System.Net.Sockets.Socket.Receive(System.Byte[])"/> method reads data into the buffer parameter and returns the number of bytes successfully read. You can call <see cref="M:System.Net.Sockets.Socket.Receive(System.Byte[])"/> from both connection-oriented 
            and connectionless sockets.
            </para>
            <para>
            This overload only requires you to provide a receive buffer. The buffer offset defaults to 0, the size defaults to the length of the buffer parameter, and the 
            <see cref="T:System.Net.Sockets.SocketFlags"/> value defaults to <see cref="F:System.Net.Sockets.SocketFlags.None"/>.
            </para>
            <para>
            If no data is available for reading, the <see cref="M:System.Net.Sockets.Socket.Receive(System.Byte[])"/> method will block until data is available, unless a time-out value was set by using <see cref="P:System.Net.Sockets.Socket.ReceiveTimeout"/>. If 
            the time-out value was exceeded, the <see cref="M:System.Net.Sockets.Socket.Receive(System.Byte[])"/> call will throw a <see cref="T:System.Net.Sockets.SocketException"/>. If you are in non-blocking mode, and there is no data available in the
            in the protocol stack buffer, the <see cref="M:System.Net.Sockets.Socket.Receive(System.Byte[])"/> method will complete immediately and throw a <see cref="T:System.Net.Sockets.SocketException"/>. You can use the <see cref="P:System.Net.Sockets.Socket.Available"/> property to 
            determine if data is available for reading. When <see cref="P:System.Net.Sockets.Socket.Available"/> is non-zero, retry the receive operation.
            </para>
            <para>If you are using a connectionless <see cref="T:System.Net.Sockets.Socket"/>, <see cref="M:System.Net.Sockets.Socket.Receive(System.Byte[])"/> will read the first queued datagram from the destination address you specify in the Connect method. If 
            the datagram you receive is larger than the size of the buffer parameter, buffer gets filled with the first part of the message, the excess data is lost and a 
            SocketException is thrown.
            </para>
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Receives data from a bound <see cref="T:System.Net.Sockets.Socket"/> into a receive buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags"/>.
            </summary>
            <param name="buffer">An array of type Byte that is the storage location for the received data.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes received.</returns>
            <remarks>
            <para>The <see cref="M:System.Net.Sockets.Socket.Receive(System.Byte[])"/> method reads data into the buffer parameter and returns the number of bytes successfully read. You can call <see cref="M:System.Net.Sockets.Socket.Receive(System.Byte[])"/> from both connection-oriented 
            and connectionless sockets.</para>
            <para>
            This overload only requires you to provide a receive buffer and the necessary <see cref="T:System.Net.Sockets.SocketFlags"/>. The buffer offset defaults to 0, and the size defaults to the length of the byte parameter.
            </para>
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives the specified number of bytes of data from a bound <see cref="T:System.Net.Sockets.Socket"/> into a receive buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags"/>.
            </summary>
            <param name="buffer">An array of type Byte that is the storage location for the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes received.</returns>
            <remarks>
            <para>The <see cref="M:System.Net.Sockets.Socket.Receive(System.Byte[])"/> method reads data into the buffer parameter and returns the number of bytes successfully read. You can call Receive from 
            both connection-oriented and connectionless sockets.</para>
            <para>This overload only requires you to provide a receive buffer, the number of bytes you want to receive, and the necessary <see cref="T:System.Net.Sockets.SocketFlags"/>.</para>
            <para>If no data is available for reading, the Receive method will block until data is available, unless a time-out value was set by using 
            <see cref="P:System.Net.Sockets.Socket.ReceiveTimeout"/>. If the time-out value was exceeded, the <see cref="M:System.Net.Sockets.Socket.Receive(System.Byte[])"/> call will throw a <see cref="T:System.Net.Sockets.SocketException"/>. If you are in non-blocking 
            mode, and there is no data available in the in the protocol stack buffer, The <see cref="M:System.Net.Sockets.Socket.Receive(System.Byte[])"/> method will complete immediately and throw a <see cref="T:System.Net.Sockets.SocketException"/>. 
            You can use the <see cref="P:System.Net.Sockets.Socket.Available"/> property to determine if data is available for reading. When <see cref="P:System.Net.Sockets.Socket.Available"/> is non-zero, retry your receive operation.</para>
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives the specified number of bytes from a bound <see cref="T:System.Net.Sockets.Socket"/> into the specified offset position of the receive buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags"/>.
            </summary>
            <param name="buffer">An array of type Byte that is the storage location for the received data.</param>
            <param name="offset">The location in buffer to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes received.</returns>
            <remarks>
            <para>The <see cref="M:System.Net.Sockets.Socket.Receive(System.Byte[])"/> method reads data into the buffer parameter and returns the number of bytes successfully read. You can call <see cref="M:System.Net.Sockets.Socket.Receive(System.Byte[])"/> from both connection-
            oriented and connectionless sockets.</para>
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
            <summary>
            Receives the specified number of bytes of data into the specified location of the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags"/>, and stores the endpoint.
            </summary>
            <param name="buffer">An array of type <see cref="T:System.Byte"/> that is the storage location for received data.</param>
            <param name="offset">The position in the buffer parameter to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/>, passed by reference, that represents the remote server.</param>
            <returns>The number of bytes received.</returns>
            <remarks>
            The <see cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)"/> method reads data into the buffer parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent. This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts.
            
            With connectionless protocols, <see cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)"/> will read the first enqueued datagram received into the local network buffer.If the datagram you receive is larger than the size of buffer, the <see cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)"/> method will fill buffer with as much of the message as is possible, and throw a <see cref="T:System.Net.Sockets.SocketException"/>.If you are using an unreliable protocol, the excess data will be lost.If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <see cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)"/> method with a large enough buffer.
            
            If no data is available for reading, the <see cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)"/> method will block until data is available.If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <see cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)"/> method will complete immediately and throw a <see cref="T:System.Net.Sockets.SocketException"/>. You can use the <see cref="P:System.Net.Sockets.Socket.Available"/> property to determine if data is available for reading. When <see cref="P:System.Net.Sockets.Socket.Available"/> is non-zero, retry the receive operation.
            
            Although <see cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)"/> is intended for connectionless protocols, you can use a connection-oriented protocol as well.If you choose to do so, you must first either establish a remote host connection by calling the Connect method or accept an incoming remote host connection by calling the <see cref="M:System.Net.Sockets.Socket.Accept"/> method. If you do not establish or accept a connection before calling the <see cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)"/> method, you will get a <see cref="T:System.Net.Sockets.SocketException"/>.You can also establish a default remote host for a connectionless protocol prior to calling the <see cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)"/> method.In either of these cases, the <see cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)"/> method will ignore the remoteEP parameter and only receive data from the connected or default remote host.
            
            With connection-oriented sockets, <see cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)"/> will read as much data as is available up to the amount of bytes specified by the size parameter. If the remote host shuts down the Socket connection with the Shutdown method, and all available data has been Received, the <see cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)"/> method will complete immediately and return zero bytes.
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
            <summary>
            Receives the specified number of bytes into the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags"/>, and stores the endpoint.
            </summary>
            <param name="buffer">An array of type Byte that is the storage location for received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/>, passed by reference, that represents the remote server.</param>
            <returns>The number of bytes received.</returns>
        </member>
        <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
            <summary>
            Receives a datagram into the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags"/>, and stores the endpoint.
            </summary>
            <param name="buffer">An array of type Byte that is the storage location for received data.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/>, passed by reference, that represents the remote server.</param>
            <returns>The number of bytes received.</returns>
        </member>
        <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)">
            <summary>
            Receives a datagram into the data buffer and stores the endpoint.
            </summary>
            <param name="buffer">An array of type Byte that is the storage location for received data.</param>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/>, passed by reference, that represents the remote server.</param>
            <returns>The number of bytes received.</returns>
            <remarks>
            <para>The <see cref="o:ReceiveFrom"/> method reads data into the buffer parameter, returns the number of bytes successfully read, 
            and captures the remote host endpoint from which the data was sent. This method is useful if you intend to receive 
            connectionless datagrams from an unknown host or multiple hosts.</para>
            <para>This overload only requires you to provide a receive buffer, and an EndPoint that represents the remote host.
            The buffer offset defaults to 0. The size defaults to the length of the buffer parameter and the socketFlags value 
            defaults to None.
            </para>
            <note type="important">
            Before calling <see cref="o:ReceiveFrom"/>, you must explicitly <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)"/> the <see cref="T:System.Net.Sockets.Socket"/> to a local endpoint using the <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)"/> method. If you do not, <see cref="o:ReceiveFrom"/> will 
            throw a <see cref="T:System.Net.Sockets.SocketException"/>.
            </note>
            <note type="important">
            The <see cref="T:System.Net.Sockets.AddressFamily"/> of the <see cref="T:System.Net.EndPoint"/> used in <see cref="o:ReceiveFrom"/> needs to match the <see cref="T:System.Net.Sockets.AddressFamily"/> of the <see cref="T:System.Net.EndPoint"/> used in <see cref="o:SendTo"/>.
            </note>
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
            <summary>
            Sets the specified <see cref="T:System.Net.Sockets.Socket"/> option to the specified integer value.
            </summary>
            <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel"/> values.</param>
            <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName"/> values.</param>
            <param name="optionValue">A value of the option.</param>
            <remarks>
            <para><see cref="T:System.Net.Sockets.Socket"/> options determine the behavior of the current <see cref="T:System.Net.Sockets.Socket"/>. For an option with a Boolean data type, specify a nonzero value to enable the option, and a 
            zero value to disable the option. For an option with an integer data type, specify the appropriate value. <see cref="T:System.Net.Sockets.Socket"/> options are grouped by level of protocol support.
            </para>
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)">
            <summary>
            Sets the specified <see cref="T:System.Net.Sockets.Socket"/> option to the specified Boolean value.
            </summary>
            <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel"/> values.</param>
            <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName"/> values.</param>
            <param name="optionValue">The value of the option, represented as a Boolean.</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])">
            <summary>
            Sets the specified <see cref="T:System.Net.Sockets.Socket"/> option to the specified value, represented as a byte array.
            </summary>
            <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel"/> values.</param>
            <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName"/> values.</param>
            <param name="optionValue">An array of type Byte that represents the value of the option.</param>
            <remarks>
            <para><see cref="T:System.Net.Sockets.Socket"/> options determine the behavior of the current <see cref="T:System.Net.Sockets.Socket"/>. Use this overload to set those <see cref="T:System.Net.Sockets.Socket"/> options that require a byte array as an option value.
            </para>
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)">
            <summary>
            Returns the value of a <see cref="T:System.Net.Sockets.Socket"/> option.
            </summary>
            <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel"/> values.</param>
            <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName"/> values.</param>
            <returns>
            An object that represents the value of the option. When the optionName parameter is set to <see cref="F:System.Net.Sockets.SocketOptionName.Linger"/> the return value is an instance of the LingerOption
            class. When optionName is set to <see cref="F:System.Net.Sockets.SocketOptionName.AddMembership"/> or <see cref="F:System.Net.Sockets.SocketOptionName.DropMembership"/>, the return value is an instance of the MulticastOption class. When optionName is 
            any other value, the return value is an integer.
            </returns>
            <remarks>
            <see cref="T:System.Net.Sockets.Socket"/> options determine the behavior of the current <see cref="T:System.Net.Sockets.Socket"/>. Use this overload to get the <see cref="F:System.Net.Sockets.SocketOptionName.Linger"/>, <see cref="F:System.Net.Sockets.SocketOptionName.AddMembership"/>, and <see cref="F:System.Net.Sockets.SocketOptionName.DropMembership"/> options. 
            For the <see cref="F:System.Net.Sockets.SocketOptionName.Linger"/> option, use <see cref="T:System.Net.Sockets.Socket"/> for the optionLevel parameter. For <see cref="F:System.Net.Sockets.SocketOptionName.AddMembership"/> and <see cref="F:System.Net.Sockets.SocketOptionName.DropMembership"/>, use <see cref="F:System.Net.Sockets.SocketOptionLevel.IP"/>. If you want to set the value of any of 
            the options listed above, use the <see cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)"/> method.
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])">
            <summary>
            Returns the specified <see cref="T:System.Net.Sockets.Socket"/> option setting, represented as a byte array.
            </summary>
            <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel"/> values.</param>
            <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName"/> values.</param>
            <param name="val">An array of type <see cref="T:System.Byte"/> that is to receive the option setting.</param>
            <remarks>
            <para>
            <see cref="T:System.Net.Sockets.Socket"/> options determine the behavior of the current <see cref="T:System.Net.Sockets.Socket"/>. Upon successful completion of this method, the array specified by the val parameter contains the value of the specified <see cref="T:System.Net.Sockets.Socket"/> option.
            </para>
            <para>
            When the length of the val array is smaller than the number of bytes required to store the value of the specified <see cref="T:System.Net.Sockets.Socket"/> option, <see cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)"/> will 
            throw a SocketException. If you receive a <see cref="T:System.Net.Sockets.SocketException"/>, use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode"/> property to obtain the specific error code. After you 
            have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. 
            Use this overload for any sockets that are represented by Boolean values or integers.
            </para>
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)">
            <summary>
            Determines the status of the <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
            <param name="microSeconds">The time to wait for a response, in microseconds.</param>
            <param name="mode">One of the <see cref="T:System.Net.Sockets.SelectMode"/> values.</param>
            <returns>
            <para>The status of the Socket based on the polling mode value passed in the mode parameter.</para>
            <list type="bullet">
            <item>
            <term><see cref="F:System.Net.Sockets.SelectMode.SelectRead"/></term>
            <description>
            <para>true if Listen has been called and a connection is pending;</para>
            <para>-or-</para>
            <para>true if data is available for reading;</para>
            <para>-or-</para>
            <para>true if the connection has been closed, reset, or terminated; otherwise, returns false.</para>
            </description>
            <term><see cref="F:System.Net.Sockets.SelectMode.SelectWrite"/></term>
            <description>
            <para>true , if processing a Connect, and the connection has succeeded;</para>
            <para>-or-</para>
            <para>true if data can be sent; otherwise, returns false.</para>
            </description>
            <term><see cref="F:System.Net.Sockets.SelectMode.SelectError"/></term>
            <description>
            <para>true if processing a <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)"/> that does not block, and the connection has failed;</para>
            <para>-or-</para>
            <para>true if <see cref="F:System.Net.Sockets.SocketOptionName.OutOfBandInline"/> is not set and out-of-band data is available; otherwise, returns false.</para>
            </description>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The Poll method will check the state of the <see cref="T:System.Net.Sockets.Socket"/>. Specify <see cref="F:System.Net.Sockets.SelectMode.SelectRead"/> for the selectMode parameter to determine if the <see cref="T:System.Net.Sockets.Socket"/> is readable. 
            Specify <see cref="F:System.Net.Sockets.SelectMode.SelectWrite"/> to determine if the <see cref="T:System.Net.Sockets.Socket"/> is writable. Use <see cref="F:System.Net.Sockets.SelectMode.SelectError"/> to detect an error condition. Poll will block execution 
            until the specified time period, measured in microseconds, elapses. Set the microSeconds parameter to a negative integer if you would like to wait 
            indefinitely for a response. If you want to check the status of multiple sockets, you might prefer to use the Select method.
            </para>
            <para>
            If you receive a <see cref="T:System.Net.Sockets.SocketException"/>, use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode"/> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.
            </para>
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.Socket.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.Socket"/>, and optionally disposes of the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
            <remarks>
            <para>This method is called by the public Dispose() method and the <see cref="M:System.Net.Sockets.Socket.Finalize"/> method. Dispose() invokes the protected Dispose(Boolean) method with the 
            disposing parameter set to true. <see cref="M:System.Net.Sockets.Socket.Finalize"/> invokes Dispose with disposing set to false.
            </para>
            <para>
            When the disposing parameter is true, this method releases all resources held by any managed objects that this Socket references. This method invokes the Dispose() method of each referenced object.
            </para>
            
            </remarks>
        </member>
        <member name="M:System.Net.Sockets.Socket.Finalize">
            <summary>
            Deconstructor
            </summary>
        </member>
        <member name="T:System.Net.Sockets.SocketError">
            <summary>
            Defines socket error constants.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.Success">
            <summary>
            The operation completed successfully.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.SocketError">
            <summary>
            An unspecified Socket error has occurred.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.Interrupted">
            <summary>
            A blocking Socket call was cancelled.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.AccessDenied">
            <summary>
            An attempt was made to access a Socket in a way that is forbidden by its access permissions.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.Fault">
            <summary>
            An invalid pointer address was detected by the underlying socket provider.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.InvalidArgument">
            <summary>
            An invalid argument was supplied to a Socket member.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.TooManyOpenSockets">
            <summary>
            There are too many open sockets in the underlying socket provider.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.WouldBlock">
            <summary>
            An operation on a non-blocking socket cannot be completed immediately.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.InProgress">
            <summary>
            A blocking operation is in progress.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.AlreadyInProgress">
            <summary>
            The non-blocking Socket already has an operation in progress.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.NotSocket">
            <summary>
            A Socket operation was attempted on a non-socket.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.DestinationAddressRequired">
            <summary>
            A required address was omitted from an operation on a Socket.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.MessageSize">
            <summary>
            The datagram is too long.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.ProtocolType">
            <summary>
            The protocol type is incorrect for this Socket.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.ProtocolOption">
            <summary>
             An unknown, invalid, or unsupported option or level was used with a Socket.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.ProtocolNotSupported">
            <summary>
            The protocol is not implemented or has not been configured.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.SocketNotSupported">
            <summary>
            The support for the specified socket type does not exist in this address family.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.OperationNotSupported">
            <summary>
            The address family is not supported by the protocol family.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.ProtocolFamilyNotSupported">
            <summary>
            The protocol family is not implemented or has not been configured.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.AddressFamilyNotSupported">
            <summary>
            The address family specified is not supported. This error is returned if the IPv6 address family was specified and the IPv6 stack is not installed on the local machine. 
            This error is returned if the IPv4 address family was specified and the IPv4 stack is not installed on the local machine.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.AddressAlreadyInUse">
            <summary>
            Only one use of an address is normally permitted.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.AddressNotAvailable">
            <summary>
            The selected IP address is not valid in this context.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.NetworkDown">
            <summary>
            The network is not available.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.NetworkUnreachable">
            <summary>
            No route to the remote host exists.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.NetworkReset">
            <summary>
            The application tried to set KeepAlive on a connection that has already timed out
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.ConnectionAborted">
            <summary>
            The connection was aborted by the .NET Framework or the underlying socket provider.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.ConnectionReset">
            <summary>
            The connection was reset by the remote peer.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.NoBufferSpaceAvailable">
            <summary>
            No free buffer space is available for a Socket operation.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.IsConnected">
            <summary>
            The Socket is already connected.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.NotConnected">
            <summary>
            The application tried to send or receive data, and the Socket is not connected.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.Shutdown">
            <summary>
            A request to send or receive data was disallowed because the Socket has already been closed.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.TimedOut">
            <summary>
            The connection attempt timed out, or the connected host has failed to respond.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.ConnectionRefused">
            <summary>
            The remote host is actively refusing a connection.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.HostDown">
            <summary>
            The operation failed because the remote host is down.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.HostUnreachable">
            <summary>
            There is no network route to the specified host.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.ProcessLimit">
            <summary>
            Too many processes are using the underlying socket provider.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.SystemNotReady">
            <summary>
            The network subsystem is unavailable.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.VersionNotSupported">
            <summary>
            The version of the underlying socket provider is out of range.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.NotInitialized">
               <para>
                  Successful start-up not yet performed.
               </para>
            <summary>
            The underlying socket provider has not been initialized.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.Disconnecting">
            <devdoc>
               <para>
                  Graceful shutdown in progress.
               </para>
            </devdoc>
            <summary>
            A graceful shutdown is in progress.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.TypeNotFound">
            <summary>
            The specified class was not found.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.HostNotFound">
            <summary>
            No such host is known. The name is not an official host name or alias.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.TryAgain">
            <summary>
            The name of the host could not be resolved. Try again later.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.NoRecovery">
            <summary>
            The error is unrecoverable or the requested database cannot be located.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketError.NoData">
            <summary>
            The requested name or IP address was not found on the name server.
            </summary>
        </member>
        <member name="T:System.Net.Sockets.SocketFlags">
            <summary>
            This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketFlags.None">
            <summary>
            Use no flags for this call.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketFlags.OutOfBand">
            <summary>
            Process out-of-band data.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketFlags.Peek">
            <summary>
             Peek at incoming message.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketFlags.DontRoute">
            <summary>
             Send without using routing tables.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketFlags.MaxIOVectorLength">
            <summary>
            Provides a standard value for the number of WSABUF structures that are used to send and receive data.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketFlags.Truncated">
            <summary>
            The message was too large to fit into the specified buffer and was truncated.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketFlags.ControlDataTruncated">
            <summary>
            Indicates that the control data did not fit into an internal 64-KB buffer and was truncated.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketFlags.Broadcast">
            <summary>
            Indicates that the control data did not fit into an internal 64-KB buffer and was truncated.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketFlags.Multicast">
            <summary>
            Indicates a multicast packet.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketFlags.Partial">
            <summary>
            Partial send or receive for message.
            </summary>
        </member>
        <member name="T:System.Net.Sockets.SocketOptionLevel">
            <summary>
            Defines socket option levels for the <see cref='T:System.Net.Sockets.Socket'/> class.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionLevel.Socket">
            <summary>
            Indicates socket options apply to the socket itself.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionLevel.IP">
            <summary>
            Indicates socket options apply to IP sockets.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionLevel.IPv6">
            <summary>
             Indicates socket options apply to IPv6 sockets.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionLevel.Tcp">
            <summary>
            Indicates socket options apply to TCP sockets.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionLevel.Udp">
            <summary>
            Indicates socket options apply to UDP sockets.
            </summary>
        </member>
        <member name="T:System.Net.Sockets.SocketOptionName">
            <summary>
            Defines socket option names for the <see cref='T:System.Net.Sockets.Socket'/> class.
            </summary>
            <remarks>
            The SocketOptionName enumeration defines the name of each Socket configuration option. 
            Sockets can be configured with the <see cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)"/> method.
            </remarks>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.Debug">
            <summary>
            <para>Record debugging information.</para>
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.AcceptConnection">
            <summary>
            <para>Socket is listening.</para>
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.ReuseAddress">
            <summary>
            Allows the socket to be bound to an address that is already in use.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.KeepAlive">
            <summary>
            Send keep-alives.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.DontRoute">
            <summary>
             Do not route, send directly to interface addresses.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.Broadcast">
            <summary>
            Permit sending broadcast messages on the socket.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.UseLoopback">
            <summary>
            Bypass hardware when possible.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.Linger">
            <summary>
            Linger on close if unsent data is present.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.OutOfBandInline">
            <summary>
            Receives out-of-band data in the normal data stream.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.DontLinger">
            <summary>
            Close socket gracefully without lingering.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.ExclusiveAddressUse">
            <summary>
             Enables a socket to be bound for exclusive access.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.SendBuffer">
            <summary>
            Specifies the total per-socket buffer space reserved for sends. This is
            unrelated to the maximum message size or the size of a TCP window.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.ReceiveBuffer">
            <summary>
            Send low water mark.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.SendLowWater">
            <summary>
            Specifies the total per-socket buffer space reserved for receives. 
            This is unrelated to the maximum message size or the size of a TCP window.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.ReceiveLowWater">
            <summary>
            Receive low water mark.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.SendTimeout">
            <summary>
            Send timeout.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.ReceiveTimeout">
            <summary>
            Receive timeout.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.Error">
            <summary>
            Get error status and clear.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.Type">
            <summary>
            Get socket type.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.MaxConnections">
            <summary>
            Maximum queue length that can be specified by <see cref='M:System.Net.Sockets.Socket.Listen(System.Int32)'/>.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.IPOptions">
            <summary>
            IP options.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.HeaderIncluded">
            <summary>
            Header is included with data.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.TypeOfService">
            <summary>
             IP type of service and preced.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.IpTimeToLive">
            <summary>
            IP time to live.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.MulticastInterface">
            <summary>
               <para>
                  IP multicast interface.
                  - Additional comments by mbolien:
                    multicast interface  You provide it with an SOCKADDR_IN, and that tells the
                    system that it should receive multicast messages on that interface (if you
                    have more than one interface).  Binding the socket is not sufficient, since
                    if the Ethernet hardware isnt set up to grab the multicast packets, it wont
                    do good to bind the socket.  Kinda like raw sockets.  Unless you
                    put the Ethernet card in promiscuous mode, youll only get stuff sent to and
                    from your machine.
               </para>
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.MulticastTimeToLive">
            <summary>
            IP multicast time to live.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.MulticastLoopback">
            <summary>
            IP Multicast loopback.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.AddMembership">
            <summary>
            Add an IP group membership.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.DropMembership">
            <summary>
            Drop an IP group membership.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.DontFragment">
            <summary>
            Don't fragment IP datagrams.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.AddSourceMembership">
            <summary>
            Join IP group/source.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.DropSourceMembership">
            <summary>
             Leave IP group/source.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.BlockSource">
            <summary>
            Block IP group/source.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.UnblockSource">
            <summary>
            Unblock IP group/source.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.PacketInformation">
            <summary>
            Receive packet information for ipv4.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.HopLimit">
            <summary>
            Specifies the maximum number of router hops for an Internet Protocol version 6 (IPv6) packet. 
            This is similar to Time to Live (TTL) for Internet Protocol version 4.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.NoDelay">
            <summary>
            Disables the Nagle algorithm for send coalescing.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.BsdUrgent">
            <summary>
            Use urgent data as defined in RFC-1222. This option can be set only once; after it is set, it cannot be turned off.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.Expedited">
            <summary>
            Use expedited data as defined in RFC-1222. This option can be set only once; after it is set, it cannot be turned off.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.NoChecksum">
            <summary>
            Send UDP datagrams with checksum set to zero.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.ChecksumCoverage">
            <summary>
            Set or get the UDP checksum coverage.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.UpdateAcceptContext">
            <summary>
            Updates an accepted socket's properties by using those of an existing socket. This is equivalent to using the Winsock2 SO_UPDATE_ACCEPT_CONTEXT 
            socket option and is supported only on connection-oriented sockets.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketOptionName.UpdateConnectContext">
            <summary>
            Updates a connected socket's properties by using those of an existing socket. This is equivalent to using the Winsock2 SO_UPDATE_CONNECT_CONTEXT 
            socket option and is supported only on connection-oriented sockets.
            </summary>
        </member>
        <member name="T:System.Net.Sockets.SocketType">
            <summary>
            Specifies the type of socket an instance of the <see cref='T:System.Net.Sockets.Socket'/> class represents.
            </summary>
            <remarks>
            Before a <see cref="T:System.Net.Sockets.Socket"/> can send and receive data, it must first be created using an <see cref="T:System.Net.Sockets.AddressFamily"/>, a SocketType, 
            and a ProtocolType. The SocketType enumeration provides several options for defining the type of <see cref="T:System.Net.Sockets.Socket"/> that you 
            intend to open.
            </remarks>
        </member>
        <member name="F:System.Net.Sockets.SocketType.Stream">
            <summary>
            Supports reliable, two-way, connection-based byte streams without the duplication of data and without preservation of boundaries. 
            A Socket of this type communicates with a single peer and requires a remote host connection before communication can 
            begin. Stream uses the Transmission Control Protocol (Tcp) <see cref='T:System.Net.Sockets.ProtocolType'/> and the InterNetworkAddressFamily.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketType.Dgram">
            <summary>
            Supports datagrams, which are connectionless, unreliable messages of a fixed (typically small) maximum length. 
            Messages might be lost or duplicated and might arrive out of order. A Socket of type Dgram requires no connection 
            prior to sending and receiving data, and can communicate with multiple peers. Dgram uses the Datagram Protocol (Udp) 
            and the InterNetworkAddressFamily.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketType.Raw">
            <summary>
            Supports access to the underlying transport protocol. Using the SocketTypeRaw, you can communicate using protocols 
            like Internet Control Message Protocol (Icmp) and Internet Group Management Protocol (Igmp). Your application must 
            provide a complete IP header when sending. Received datagrams return with the IP header and options intact.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketType.Rdm">
            <summary>
            Supports connectionless, message-oriented, reliably delivered messages, and preserves message boundaries in data. 
            Rdm (Reliably Delivered Messages) messages arrive unduplicated and in order. Furthermore, the sender is notified 
            if messages are lost. If you initialize a Socket using Rdm, you do not require a remote host connection before 
            sending and receiving data. With Rdm, you can communicate with multiple peers.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketType.Seqpacket">
            <summary>
            Provides connection-oriented and reliable two-way transfer of ordered byte streams across a network. Seqpacket 
            does not duplicate data, and it preserves boundaries within the data stream. A Socket of type Seqpacket 
            communicates with a single peer and requires a remote host connection before communication can begin.
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketType.Unknown">
            <summary>
            Specifies an unknown Socket type.
            </summary>
        </member>
        <member name="T:System.Security.Cryptography.X509Certificates.X509Certificate">
            <summary>
            Provides methods that help you use X.509 v.3 certificates.
            </summary>
            <remarks>
            ASN.1 DER is the only certificate format supported by this class.
            </remarks>
        </member>
        <member name="F:System.Security.Cryptography.X509Certificates.X509Certificate._issuer">
            <summary>
            Contains the certificate issuer.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.X509Certificates.X509Certificate._subject">
            <summary>
            Contains the subject.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.X509Certificates.X509Certificate._effectiveDate">
            <summary>
            Contains the effective date of the certificate.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.X509Certificates.X509Certificate._expirationDate">
            <summary>
            Contains the expiration date of the certificate.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.X509Certificates.X509Certificate._handle">
            <summary>
            Contains the handle.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.X509Certificates.X509Certificate._sessionHandle">
            <summary>
            Contains the session handle.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor">
            <summary>
            Initializes a new instance of the X509Certificate class.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> class defined from a sequence of bytes representing an X.509v3 certificate.
            </summary>
            <param name="certificate">A byte array containing data from an X.509 certificate.</param>
            <remarks>
            ASN.1 DER is the only certificate format supported by this class. 
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> class using a byte array and a password.
            </summary>
            <param name="certificate">A byte array containing data from an X.509 certificate.</param>
            <param name="password">The password required to access the X.509 certificate data.</param>
            <remarks>
            ASN.1 DER is the only certificate format supported by this class. 
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> class defined from a string with the content of an X.509v3 certificate.
            </summary>
            <param name="certificate">A string containing a X.509 certificate.</param>
            <remarks>
            ASN.1 DER is the only certificate format supported by this class. 
            This methods is exclusive of nanoFramework. The equivalent .NET constructor accepts a file name as the parameter.
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> class defined from a string with the content of an X.509v3 certificate.
            </summary>
            <param name="certificate">A string containing a X.509 certificate.</param>
            <param name="password">The password required to access the X.509 certificate data.</param>
            <remarks>
            ASN.1 DER is the only certificate format supported by this class. 
            This methods is exclusive of nanoFramework. The equivalent .NET constructor accepts a file name as the parameter.
            </remarks>
        </member>
        <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate.Issuer">
            <summary>
            Gets the name of the certificate authority that issued the X.509v3 certificate.
            </summary>
            <value>
            The name of the certificate authority that issued the X.509v3 certificate.
            </value>
        </member>
        <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate.Subject">
            <summary>
            Gets the subject distinguished name from the certificate.
            </summary>
            <value>
            The subject distinguished name from the certificate.
            </value>
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetEffectiveDate">
            <summary>
            Returns the effective date of this X.509v3 certificate.
            </summary>
            <returns>The effective date for this X.509 certificate.</returns>
            <remarks>
            This methods is exclusive of nanoFramework. The equivalent .NET method is GetEffectiveDateString().
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetExpirationDate">
            <summary>
            Returns the expiration date of this X.509v3 certificate.
            </summary>
            <returns>The expiration date for this X.509 certificate.</returns>
            <remarks>
            This methods is exclusive of nanoFramework. The equivalent .NET method is GetExpirationDateString().
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertData">
            <summary>
            Returns the raw data for the entire X.509v3 certificate as an array of bytes.
            </summary>
            <returns>A byte array containing the X.509 certificate data.</returns>
        </member>
        <member name="T:System.Security.Cryptography.X509Certificates.X509Certificate2">
            <summary>
            Represents an X.509 certificate.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> class.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> class using information from a byte array.
            </summary>
            <param name="rawData">A byte array containing data from an X.509 certificate.</param>
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> class using a byte array and a password.
            </summary>
            <param name="rawData">A byte array containing data from an X.509 certificate.</param>
            <param name="password">The password required to access the X.509 certificate data.</param>
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> class using a string with the content of an X.509 certificate.
            </summary>
            <param name="certificate">A string containing a X.509 certificate.</param>
            <remarks>
            This methods is exclusive of nanoFramework. The equivalent .NET constructor accepts a file name as the parameter.
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> class using a string with the content of an X.509 certificate and a password used to access the certificate.
            </summary>
            <param name="certificate">A string containing a X.509 certificate.</param>
            <param name="password">The password required to access the X.509 certificate data.</param>
            <remarks>
            This methods is exclusive of nanoFramework. The equivalent .NET constructor accepts a file name as the parameter.
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> class using a string with the content of an X.509 public certificate, the private key and a password used to access the certificate.
            </summary>
            <param name="certificate">A string containing a X.509 certificate.</param>
            <param name="key">A string containing a PEM private key.</param>
            <param name="password">The password required to access the X.509 certificate data.</param>
            <remarks>
            This methods is exclusive of nanoFramework. There is no equivalent in .NET framework.
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> class using a string with the content of an X.509 public certificate, the private key and a password used to access the certificate.
            </summary>
            <param name="rawData">A byte array containing data from an X.509 certificate.</param>
            <param name="key">A string containing a PEM private key.</param>
            <param name="password">The password required to access the X.509 certificate data.</param>
            <remarks>
            This methods is exclusive of nanoFramework. There is no equivalent in .NET framework.
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> class using a string with the content of an X.509 public certificate, the private key and a password used to access the certificate.
            </summary>
            <param name="rawData">A byte array containing data from an X.509 certificate.</param>
            <param name="key">A byte array containing a PEM private key.</param>
            <param name="password">The password required to access the X.509 certificate data.</param>
            <remarks>
            This methods is exclusive of nanoFramework. There is no equivalent in .NET framework.
            </remarks>
        </member>
        <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey">
            <summary>
            Gets a value that indicates whether an X509Certificate2 object contains a private key.
            </summary>
            <value><see langword="true"/> if the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> object contains a private key; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter">
            <summary>
            Gets the date in local time after which a certificate is no longer valid.
            </summary>
            <value>A <see cref="T:System.DateTime"/> object that represents the expiration date for the certificate.</value>
        </member>
        <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore">
            <summary>
            Gets the date in local time on which a certificate becomes valid.
            </summary>
            <value>A <see cref="T:System.DateTime"/> object that represents the effective date of the certificate.</value>
        </member>
        <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.RawData">
            <summary>
            Gets the raw data of a certificate.
            </summary>
            <value>The raw data of the certificate as a byte array.</value>
        </member>
    </members>
</doc>
