#region 程序集 ICSharpCode.SharpZipLib, Version=1.3.2.10, Culture=neutral, PublicKeyToken=1b03e6acf1164f73
// E:\NuGet\packages\sharpziplib\1.3.2\lib\netstandard2.1\ICSharpCode.SharpZipLib.dll
#endregion

using ICSharpCode.SharpZipLib.Zip.Compression.Streams;
using System.IO;

namespace ICSharpCode.SharpZipLib.Zip
{
    //
    // 摘要:
    //     This is an InflaterInputStream that reads the files baseInputStream an zip archive
    //     one after another. It has a special method to get the zip entry of the next file.
    //     The zip entry contains information about the file name size, compressed size,
    //     Crc, etc. It includes support for Stored and Deflated entries.
    //     Author of the original java version : Jochen Hoenicke
    public class ZipInputStream : InflaterInputStream
    {
        //
        // 摘要:
        //     Creates a new Zip input stream, for reading a zip archive.
        //
        // 参数:
        //   baseInputStream:
        //     The underlying System.IO.Stream providing data.
        public ZipInputStream(Stream baseInputStream);
        //
        // 摘要:
        //     Creates a new Zip input stream, for reading a zip archive.
        //
        // 参数:
        //   baseInputStream:
        //     The underlying System.IO.Stream providing data.
        //
        //   bufferSize:
        //     Size of the buffer.
        public ZipInputStream(Stream baseInputStream, int bufferSize);

        //
        // 摘要:
        //     Optional password used for encryption when non-null
        //
        // 值:
        //     A password for all encrypted entries in this ICSharpCode.SharpZipLib.Zip.ZipInputStream
        public string Password { get; set; }
        //
        // 摘要:
        //     Gets a value indicating if there is a current entry and it can be decompressed
        //
        // 言论：
        //     The entry can only be decompressed if the library supports the zip features required
        //     to extract it. See the ZipEntry Version property for more details. Since ICSharpCode.SharpZipLib.Zip.ZipInputStream
        //     uses the local headers for extraction, entries with no compression combined with
        //     the ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Descriptor flag set, cannot be
        //     extracted as the end of the entry data cannot be deduced.
        public bool CanDecompressEntry { get; }
        //
        // 摘要:
        //     Returns 1 if there is an entry available Otherwise returns 0.
        public override int Available { get; }
        //
        // 摘要:
        //     Returns the current size that can be read from the current entry if available
        //
        // 异常:
        //   T:ICSharpCode.SharpZipLib.Zip.ZipException:
        //     Thrown if the entry size is not known.
        //
        //   T:System.InvalidOperationException:
        //     Thrown if no entry is currently available.
        public override long Length { get; }

        //
        // 摘要:
        //     Closes the current zip entry and moves to the next one.
        //
        // 异常:
        //   T:System.InvalidOperationException:
        //     The stream is closed
        //
        //   T:ICSharpCode.SharpZipLib.Zip.ZipException:
        //     The Zip stream ends early
        public void CloseEntry();
        //
        // 摘要:
        //     Advances to the next entry in the archive
        //
        // 返回结果:
        //     The next entry in the archive or null if there are no more entries.
        //
        // 异常:
        //   T:System.InvalidOperationException:
        //     Input stream is closed
        //
        //   T:ICSharpCode.SharpZipLib.Zip.ZipException:
        //     Password is not set, password is invalid, compression method is invalid, version
        //     required to extract is not supported
        //
        // 言论：
        //     If the previous entry is still open CloseEntry is called.
        public ZipEntry GetNextEntry();
        //
        // 摘要:
        //     Read a block of bytes from the stream.
        //
        // 参数:
        //   buffer:
        //     The destination for the bytes.
        //
        //   offset:
        //     The index to start storing data.
        //
        //   count:
        //     The number of bytes to attempt to read.
        //
        // 返回结果:
        //     Returns the number of bytes read.
        //
        // 言论：
        //     Zero bytes read means end of stream.
        public override int Read(byte[] buffer, int offset, int count);
        //
        // 摘要:
        //     Reads a byte from the current zip entry.
        //
        // 返回结果:
        //     The byte or -1 if end of stream is reached.
        public override int ReadByte();
        //
        // 摘要:
        //     Closes the zip input stream
        protected override void Dispose(bool disposing);
    }
}