#region 程序集 ICSharpCode.SharpZipLib, Version=1.3.2.10, Culture=neutral, PublicKeyToken=1b03e6acf1164f73
// E:\NuGet\packages\sharpziplib\1.3.2\lib\netstandard2.1\ICSharpCode.SharpZipLib.dll
#endregion

using ICSharpCode.SharpZipLib.Core;
using ICSharpCode.SharpZipLib.Zip.Compression.Streams;
using System.IO;

namespace ICSharpCode.SharpZipLib.Zip
{
    //
    // 摘要:
    //     This is a DeflaterOutputStream that writes the files into a zip archive one after
    //     another. It has a special method to start a new zip entry. The zip entries contains
    //     information about the file name size, compressed size, CRC, etc. It includes
    //     support for Stored and Deflated entries. This class is not thread safe.
    //     Author of the original java version : Jochen Hoenicke
    public class ZipOutputStream : DeflaterOutputStream
    {
        //
        // 摘要:
        //     Creates a new Zip output stream, writing a zip archive.
        //
        // 参数:
        //   baseOutputStream:
        //     The output stream to which the archive contents are written.
        public ZipOutputStream(Stream baseOutputStream);
        //
        // 摘要:
        //     Creates a new Zip output stream, writing a zip archive.
        //
        // 参数:
        //   baseOutputStream:
        //     The output stream to which the archive contents are written.
        //
        //   bufferSize:
        //     Size of the buffer to use.
        public ZipOutputStream(Stream baseOutputStream, int bufferSize);

        //
        // 摘要:
        //     Gets a flag value of true if the central header has been added for this archive;
        //     false if it has not been added.
        //
        // 言论：
        //     No further entries can be added once this has been done.
        public bool IsFinished { get; }
        //
        // 摘要:
        //     Get / set a value indicating how Zip64 Extension usage is determined when adding
        //     entries.
        //
        // 言论：
        //     Older archivers may not understand Zip64 extensions. If backwards compatability
        //     is an issue be careful when adding entries to an archive. Setting this property
        //     to off is workable but less desirable as in those circumstances adding a file
        //     larger then 4GB will fail.
        public UseZip64 UseZip64 { get; set; }
        //
        // 摘要:
        //     Used for transforming the names of entries added by ICSharpCode.SharpZipLib.Zip.ZipOutputStream.PutNextEntry(ICSharpCode.SharpZipLib.Zip.ZipEntry).
        //     Defaults to ICSharpCode.SharpZipLib.Zip.PathTransformer, set to null to disable
        //     transforms and use names as supplied.
        public INameTransform NameTransform { get; set; }

        //
        // 摘要:
        //     Closes the current entry, updating header and footer information as required
        //
        // 异常:
        //   T:ICSharpCode.SharpZipLib.Zip.ZipException:
        //     Invalid entry field values.
        //
        //   T:System.IO.IOException:
        //     An I/O error occurs.
        //
        //   T:System.InvalidOperationException:
        //     No entry is active.
        public void CloseEntry();
        //
        // 摘要:
        //     Finishes the stream. This will write the central directory at the end of the
        //     zip file and flush the stream.
        //
        // 异常:
        //   T:System.IO.IOException:
        //     An I/O error occurs.
        //
        //   T:ICSharpCode.SharpZipLib.Zip.ZipException:
        //     Comment exceeds the maximum length
        //     Entry name exceeds the maximum length
        //
        // 言论：
        //     This is automatically called when the stream is closed.
        public override void Finish();
        //
        // 摘要:
        //     Flushes the stream by calling Flush on the deflater stream unless the current
        //     compression method is ICSharpCode.SharpZipLib.Zip.CompressionMethod.Stored. Then
        //     it flushes the underlying output stream.
        public override void Flush();
        //
        // 摘要:
        //     Get the current deflater compression level
        //
        // 返回结果:
        //     The current compression level
        public int GetLevel();
        //
        // 摘要:
        //     Starts a new Zip entry. It automatically closes the previous entry if present.
        //     All entry elements bar name are optional, but must be correct if present. If
        //     the compression method is stored and the output is not patchable the compression
        //     for that entry is automatically changed to deflate level 0
        //
        // 参数:
        //   entry:
        //     the entry.
        //
        // 异常:
        //   T:System.ArgumentNullException:
        //     if entry passed is null.
        //
        //   T:System.IO.IOException:
        //     if an I/O error occured.
        //
        //   T:System.InvalidOperationException:
        //     if stream was finished
        //
        //   T:ICSharpCode.SharpZipLib.Zip.ZipException:
        //     Too many entries in the Zip file
        //     Entry name is too long
        //     Finish has already been called
        //
        //   T:System.NotImplementedException:
        //     The Compression method specified for the entry is unsupported.
        public void PutNextEntry(ZipEntry entry);
        //
        // 摘要:
        //     Set the zip file comment.
        //
        // 参数:
        //   comment:
        //     The comment text for the entire archive.
        //
        // 异常:
        //   T:System.ArgumentOutOfRangeException:
        //     The converted comment is longer than 0xffff bytes.
        public void SetComment(string comment);
        //
        // 摘要:
        //     Sets the compression level. The new level will be activated immediately.
        //
        // 参数:
        //   level:
        //     The new compression level (1 to 9).
        //
        // 异常:
        //   T:System.ArgumentOutOfRangeException:
        //     Level specified is not supported.
        public void SetLevel(int level);
        //
        // 摘要:
        //     Writes the given buffer to the current entry.
        //
        // 参数:
        //   buffer:
        //     The buffer containing data to write.
        //
        //   offset:
        //     The offset of the first byte to write.
        //
        //   count:
        //     The number of bytes to write.
        //
        // 异常:
        //   T:ICSharpCode.SharpZipLib.Zip.ZipException:
        //     Archive size is invalid
        //
        //   T:System.InvalidOperationException:
        //     No entry is active.
        public override void Write(byte[] buffer, int offset, int count);
    }
}